{
  "openapi": "3.0.3",
  "info": {
    "description": "<b>This is Raxa API's Collection.</b>\n\nThe base URI for all API requests is `https://demo.raxa.io/api/ws/rest/v1/raxacore`.\n",
    "title": "RAXA",
    "version": "1.0"
  },
  "security": [
    {
      "BasicAuth": []
    }
  ],
  "servers": [
    {
      "url": "https://www.raxa.io/api/ws/rest/v1/raxacore",
      "description": "This is the production server URL."
    },
    {
      "url": "https://demo.raxa.io/api/ws/rest/v1/raxacore",
      "description": "This is the demo server url."
    },
    {
      "url": "https://api.raxa.io",
      "description": "This api.raxa.io server url is used only with the API's starting with paths:/extn."
    }
  ],
  "paths": {
    "/amazon-user/{uuid}": {
      "get": {
        "tags": [
          "Amazon"
        ],
        "summary": "Get Amazon User by Self Patient UUID",
        "description": "Fetches the Amazon user based on a patient's UUID.",
        "operationId": "getAmazonUserByPatientId",
        "parameters": [
          {
            "name": "uuid",
            "in": "path",
            "description": "Patient UUID",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AmazonUserResponse"
                }
              }
            }
          },
          "401": {
            "description": "API Authentication Exception"
          },
          "404": {
            "description": "Patient not found or Amazon user not found"
          }
        },
        "security": [
          {
            "Basic_Auth": []
          }
        ]
      }
    },
    "/amazon-user": {
      "post": {
        "tags": [
          "Amazon"
        ],
        "summary": "Save Amazon User by Self Patient UUID",
        "description": "Link or update an Amazon user with a patient.",
        "operationId": "createAmazonUser",
        "requestBody": {
          "description": "Amazon user's patient details",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AmazonUserRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AmazonUserResponse"
                }
              }
            }
          },
          "401": {
            "description": "API Authentication Exception"
          },
          "404": {
            "description": "Patient not found"
          }
        },
        "security": [
          {
            "Basic_Auth": []
          }
        ]
      }
    },
    "/amazon-user/delink": {
      "post": {
        "tags": [
          "Amazon"
        ],
        "summary": "Delink Amazon user.",
        "description": "Delink an Amazon user by Self Patient UUID.",
        "operationId": "delinkAmazonUser",
        "requestBody": {
          "description": "Patient details to delink from Amazon user",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DelinkRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DelinkResponse"
                }
              }
            }
          },
          "401": {
            "description": "API Authentication Exception"
          },
          "404": {
            "description": "Patient not found or Amazon account is not linked"
          }
        },
        "security": [
          {
            "Basic_Auth": []
          }
        ]
      }
    },
    "/amazon-prescription": {
      "get": {
        "tags": [
          "Amazon"
        ],
        "summary": "Get Amazon Prescription",
        "parameters": [
          {
            "in": "query",
            "name": "consultation_id",
            "required": true,
            "description": "The consultation UUID",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully retrieved the prescription",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AmazonPrescriptionResponse"
                }
              }
            }
          },
          "400": {
            "description": "Validation Error"
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "security": [
          {
            "Basic_Auth": []
          }
        ]
      },
      "post": {
        "tags": [
          "Amazon"
        ],
        "summary": "Create Amazon Prescription",
        "requestBody": {
          "description": "Prescription details to be created",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AmazonPrescriptionRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successfully created the prescription",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AmazonPrescriptionCreationResponse"
                }
              }
            }
          },
          "400": {
            "description": "Validation Error"
          },
          "401": {
            "description": "Unauthorized"
          },
          "500": {
            "description": "Internal Server Error"
          }
        },
        "security": [
          {
            "Basic_Auth": []
          }
        ]
      }
    },
    "/accessRelationship": {
      "get": {
        "tags": [
          "AccessRelationship"
        ],
        "summary": "Check Access Relationship between two objects",
        "description": "Verifies the access relationship between two given objects based on the parameters.\n",
        "parameters": [
          {
            "$ref": "#/components/parameters/FromObjectClassParam"
          },
          {
            "$ref": "#/components/parameters/ToObjectClassParam"
          },
          {
            "$ref": "#/components/parameters/FromObjectIdParam"
          },
          {
            "$ref": "#/components/parameters/ToObjectIdParam"
          },
          {
            "$ref": "#/components/parameters/RelationshipTypeParam"
          }
        ],
        "responses": {
          "200": {
            "description": "Access verification successful",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/AccessVerificationResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        },
        "security": [
          {
            "Basic_Auth": []
          }
        ]
      }
    },
    "/accessRelationship/likeItem": {
      "post": {
        "tags": [
          "AccessRelationship"
        ],
        "summary": "Post call for like item",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/LikeItemRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LikeItemResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad request"
          },
          "500": {
            "description": "Internal server error"
          }
        },
        "security": [
          {
            "Basic_Auth": []
          }
        ]
      }
    },
    "/accessRelationship/dislikeItem": {
      "post": {
        "tags": [
          "AccessRelationship"
        ],
        "summary": "Post call for dislike item",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/LikeItemRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LikeItemResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad request"
          },
          "500": {
            "description": "Internal server error"
          }
        },
        "security": [
          {
            "Basic_Auth": []
          }
        ]
      }
    },
    "/accessRelationship/voidAccessRelationship": {
      "post": {
        "tags": [
          "AccessRelationship"
        ],
        "summary": "Post call to void access relationship",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/VoidAccessRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/VoidAccessResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad request"
          },
          "500": {
            "description": "Internal server error"
          }
        },
        "security": [
          {
            "Basic_Auth": []
          }
        ]
      }
    },
    "/accessRelationship/deleteFeedPost": {
      "post": {
        "tags": [
          "AccessRelationship"
        ],
        "summary": "Post call to delete a feed",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DeleteFeedRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DeleteFeedResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad request"
          },
          "500": {
            "description": "Internal server error"
          }
        },
        "security": [
          {
            "Basic_Auth": []
          }
        ]
      }
    },
    "/accessRelationship/comment": {
      "post": {
        "tags": [
          "AccessRelationship"
        ],
        "summary": "Post call for comment Item",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CommentRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CommentResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad request"
          },
          "500": {
            "description": "Internal server error"
          }
        },
        "security": [
          {
            "Basic_Auth": []
          }
        ]
      }
    },
    "/accessRelationship/socialPost": {
      "post": {
        "tags": [
          "AccessRelationship"
        ],
        "summary": "Post call for social post",
        "description": "API endpoint to post a social feed.",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SocialPost"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successfully posted the social feed.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SocialPostResponse"
                }
              }
            }
          },
          "400": {
            "description": "Invalid or missing payload details",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string",
                      "description": "Error message"
                    }
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "Basic_Auth": []
          }
        ]
      }
    },
    "/accessRelationship/cpcPost": {
      "post": {
        "summary": "Post call for CPC post",
        "description": "Create a CPC post with the provided details.",
        "tags": [
          "AccessRelationship"
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CpcPostRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "CPC post successfully created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CpcPostResponse"
                }
              }
            }
          },
          "400": {
            "description": "Error related to input parameters or processing",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "Basic_Auth": []
          }
        ]
      }
    },
    "/accessRelationship/getSecurityGroupId": {
      "get": {
        "tags": [
          "AccessRelationship"
        ],
        "summary": "Get security group id.",
        "description": "Retrieves the security group ID for a given message using its UUID.",
        "parameters": [
          {
            "$ref": "#/components/parameters/MessageUuidParam"
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully retrieved security group ID",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/SecurityGroupIdResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string",
                  "description": "Error message"
                }
              }
            }
          }
        },
        "security": [
          {
            "Basic_Auth": []
          }
        ]
      }
    },
    "/accessRelationship/checkCpcAccess": {
      "get": {
        "tags": [
          "AccessRelationship"
        ],
        "summary": "Check CPC Message Access to a post",
        "description": "Determine if a user can access a specific message using the message UUID and the person's UUID.",
        "parameters": [
          {
            "$ref": "#/components/parameters/MessageUuidParam"
          },
          {
            "$ref": "#/components/parameters/PersonUuidParam"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AccessCheckResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string",
                  "description": "Error message"
                }
              }
            }
          }
        },
        "security": [
          {
            "Basic_Auth": []
          }
        ]
      }
    },
    "/accessRelationship/checkPersonAccess": {
      "get": {
        "tags": [
          "AccessRelationship"
        ],
        "summary": "Check CPC Access.",
        "description": "Determine if a person, identified by its UUID, has access to a group.",
        "parameters": [
          {
            "$ref": "#/components/parameters/ProviderPersonUuidParam"
          },
          {
            "$ref": "#/components/parameters/GroupIdParam"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PersonAccessCheckResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string",
                  "description": "Error message"
                }
              }
            }
          }
        },
        "security": [
          {
            "Basic_Auth": []
          }
        ]
      }
    },
    "/accessRelationship/getCpcJoinRequests": {
      "get": {
        "tags": [
          "AccessRelationship"
        ],
        "summary": "Gives join requests for a particular post.",
        "description": "Retrieve a list of join requests for a specified group.",
        "parameters": [
          {
            "$ref": "#/components/parameters/GroupIdParam"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/JoinRequestsResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string",
                  "description": "Error message"
                }
              }
            }
          }
        },
        "security": [
          {
            "Basic_Auth": []
          }
        ]
      }
    },
    "/appointmentscheduling/v1/appointmentallowingoverbook": {
      "post": {
        "tags": [
          "Appointment"
        ],
        "summary": "Create an appointment allowing overbook",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "appointmentType": {
                    "type": "string",
                    "description": "UUID of the appointment type."
                  },
                  "patient": {
                    "type": "string",
                    "description": "UUID of the patient."
                  },
                  "reason": {
                    "type": "string"
                  },
                  "selectedSlot": {
                    "type": "object",
                    "properties": {
                      "startDateTime": {
                        "type": "string",
                        "format": "date-time"
                      },
                      "endDateTime": {
                        "type": "string",
                        "format": "date-time"
                      }
                    }
                  },
                  "endDateTime": {
                    "type": "string",
                    "format": "date-time"
                  },
                  "startDateTime": {
                    "type": "string",
                    "format": "date-time"
                  },
                  "status": {
                    "type": "string"
                  },
                  "timeSlot": {
                    "type": "string",
                    "description": "UUID of the time slot."
                  },
                  "user": {
                    "type": "string"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Appointment"
                }
              }
            }
          }
        },
        "security": [
          {
            "Basic_Auth": []
          }
        ]
      }
    },
    "/appointmentscheduling/v1/saveClinics": {
      "post": {
        "tags": [
          "Appointment"
        ],
        "summary": "Save clinics",
        "operationId": "saveClinics",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ClinicInput"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Clinics saved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ClinicResponse"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request"
          },
          "500": {
            "description": "Internal server error"
          }
        },
        "security": [
          {
            "Basic_Auth": []
          }
        ]
      }
    },
    "/appointmentscheduling/appointmentType": {
      "post": {
        "tags": [
          "Appointment"
        ],
        "summary": "Save Appointment Type",
        "operationId": "saveAppointmentType",
        "requestBody": {
          "description": "JSON body for appointment type",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AppointmentTypeRequestBody"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AppointmentTypeResponse"
                }
              }
            }
          },
          "400": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "default": {
            "description": "Unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "security": [
          {
            "Basic_Auth": []
          }
        ]
      }
    },
    "/appointmentscheduling/appointmentblock": {
      "get": {
        "tags": [
          "Appointment"
        ],
        "summary": "Get Appointments Blocks.",
        "operationId": "getAppointmentBlocks",
        "parameters": [
          {
            "name": "location",
            "in": "query",
            "description": "location of an appointment.",
            "required": false,
            "schema": {
              "type": "string",
              "format": "date"
            }
          },
          {
            "name": "provider",
            "in": "query",
            "description": "UUID of the provider to retrieve appointments for",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "display",
            "in": "query",
            "description": "Display name of an appointment.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "endDate",
            "in": "query",
            "description": "End date for filtering appointments.",
            "required": false,
            "schema": {
              "type": "string",
              "format": "date"
            }
          },
          {
            "name": "uuid",
            "in": "query",
            "description": "uuid of an appointment.",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "types",
            "in": "query",
            "description": "type of an appointment.",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "v",
            "in": "query",
            "description": "version of an appointment.",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "v",
            "in": "query",
            "description": "audit info of an appointment.",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetAppointmentBlock"
                }
              }
            }
          },
          "400": {
            "description": "Error in processing the request",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        },
        "security": [
          {
            "Basic_Auth": []
          }
        ]
      }
    },
    "/appointmentscheduling/v1/appointment": {
      "get": {
        "tags": [
          "Appointment"
        ],
        "summary": "Retrieve appointments based on parameters.",
        "parameters": [
          {
            "name": "fromDate",
            "in": "query",
            "required": true,
            "description": "Date from which to fetch appointments",
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "v",
            "in": "query",
            "required": true,
            "description": "Version",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "patient",
            "in": "query",
            "required": true,
            "description": "Patient UUID",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "dc",
            "in": "query",
            "required": false,
            "description": "Data check value",
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "A list of appointments",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AppointmentResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "Basic_Auth": []
          }
        ]
      }
    },
    "/appointmentscheduling/v1/appointment/{appointmentUuid}": {
      "post": {
        "tags": [
          "Appointment"
        ],
        "summary": "Update Appointment Status",
        "description": "Request to update the status of a specific appointment using its UUID.\n",
        "operationId": "updateAppointmentStatus",
        "parameters": [
          {
            "name": "appointmentUuid",
            "in": "path",
            "required": true,
            "description": "The UUID of the appointment to be updated.",
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "status": {
                    "type": "string",
                    "description": "The new status of the appointment."
                  },
                  "uuid": {
                    "type": "string",
                    "format": "uuid",
                    "description": "The UUID of the appointment to be updated."
                  }
                },
                "required": [
                  "status",
                  "uuid"
                ]
              },
              "example": {
                "status": "SCHEDULED",
                "uuid": "1b0d1509-c809-45d3-9a5e-cd170e875a69"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Appointment"
                }
              }
            }
          }
        },
        "security": [
          {
            "Basic_Auth": []
          }
        ]
      }
    },
    "/appointmentscheduling/v1/getBookedSlots": {
      "get": {
        "tags": [
          "Appointment"
        ],
        "summary": "Retrieve booked slots",
        "parameters": [
          {
            "name": "block",
            "in": "query",
            "required": true,
            "description": "Block identifier",
            "schema": {
              "type": "string",
              "example": "a105729e-3752-4acd-8318-ad9961b63981"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/BookedSlot"
                  }
                }
              }
            }
          },
          "default": {
            "description": "Unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/getBookdSlotError"
                }
              }
            }
          }
        },
        "security": [
          {
            "Basic_Auth": []
          }
        ]
      }
    },
    "/cds/subscribeToCdsService": {
      "post": {
        "tags": [
          "CDS Services"
        ],
        "summary": "Subscribe to CDS Service",
        "description": "Subscribe to a specific Clinical Decision Support service for a particular security group.",
        "operationId": "subscribeToCdsService",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SubscribeRequest"
              },
              "example": {
                "securityGroupId": "88644",
                "cdsServiceId": "hypertension"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Subscription successful",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string",
                  "example": "Subscription success"
                }
              }
            }
          }
        },
        "security": [
          {
            "Basic_Auth": []
          }
        ]
      }
    },
    "/cds/allsubscribedCdsServices": {
      "post": {
        "tags": [
          "CDS Services"
        ],
        "summary": "Get All Subscribed CDS Services",
        "description": "Retrieve a list of all Clinical Decision Support services that the user is subscribed to.",
        "operationId": "getAllSubscribedCdsServices",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object"
              },
              "example": {}
            }
          }
        },
        "responses": {
          "200": {
            "description": "List of all subscribed CDS services",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SubscribedCdsServicesResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "Basic_Auth": []
          }
        ]
      }
    },
    "/cds/getAllLiveCdsServices": {
      "post": {
        "tags": [
          "CDS Services"
        ],
        "summary": "Get All Live CDS Services",
        "description": "Retrieve a list of all live Clinical Decision Support services.",
        "operationId": "getAllLiveCdsServices",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object"
              },
              "example": {}
            }
          }
        },
        "responses": {
          "200": {
            "description": "List of all live CDS services",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LiveCdsServicesResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "Basic_Auth": []
          }
        ]
      }
    },
    "/encounter": {
      "get": {
        "tags": [
          "Encounter"
        ],
        "summary": "Retrieve Patient Encounter Details.",
        "description": "This API endpoint fetches detailed information about a specific patient's encounter in the healthcare system. An encounter represents an interaction between the patient and the healthcare system, and this call returns a comprehensive set of data related to such interactions.\n Specifically, for the given patient UUID, the response provides\n 1. General details about the encounter, such as its date and time and the associated location and type (e.g., outpatient or inpatient).\n 2. Details of the patient involved, including their UUID and display name\n 3. A list of observations (obs) made during the encounter, which might include diagnoses, prescribed tests, and other clinical notes. Each observation contains detailed information about its associated concept.\n 4. A list of orders (orders) generated during the encounter, which can be of different types like procedure orders, test orders, and drug orders. This includes details about drugs, dosages, and instructions.\n 5. Information about the healthcare provider overseeing the encounter\n 6. Any images or documents associated with the encounter\n Using the encounterCount parameter, you can specify the number of encounters you want to retrieve for the patient (default = 1).\n",
        "parameters": [
          {
            "$ref": "#/components/parameters/smartPatient"
          },
          {
            "$ref": "#/components/parameters/encounterCount"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "result": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/EncounterResponse"
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "Basic_Auth": []
          }
        ]
      },
      "post": {
        "tags": [
          "Encounter"
        ],
        "summary": "Create a new patient encounter",
        "description": "This endpoint allows clients to create a new patient encounter record.\nAn encounter represents a single interaction between\npatients and healthcare providers. This can include consultations,\ntests, procedures, and other types of interactions\n",
        "requestBody": {
          "required": true,
          "description": "The data representing the details of the encounter, including observations, \norders, images, and other relevant information\n",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Encounter"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Encounter created successfully.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EncounterPostResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "Basic_Auth": []
          }
        ]
      }
    },
    "/encounter/prescription-report/generate": {
      "post": {
        "tags": [
          "Encounter"
        ],
        "summary": "Generate encounter e-prescription report.",
        "description": "This endpoint generates an e-prescription report for a specific patient encounter. The patient and encounter must be specified in the request body.\n",
        "operationId": "generatePrescriptionReport",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PrescriptionReportRequest"
              },
              "examples": {
                "GeneratePrescriptionReportExample": {
                  "value": {
                    "patient": "7fa850c5-fc0f-499c-8322-862be989bea0",
                    "encounter": "b154227a-b681-426b-b9d4-76a33662b190"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Prescription report generated successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PrescriptionReportResponse"
                },
                "examples": {
                  "PrescriptionReportGenerated": {
                    "value": {
                      "status": "success",
                      "report": "encounder_e_prescription_document_path_url"
                    }
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "Basic_Auth": []
          }
        ]
      }
    },
    "/feed": {
      "get": {
        "tags": [
          "Feed"
        ],
        "summary": "Get call to List the feed based on feedOffset",
        "parameters": [
          {
            "name": "feedOffset",
            "in": "query",
            "schema": {
              "type": "integer"
            },
            "example": "1"
          },
          {
            "name": "feedTypes",
            "in": "query",
            "schema": {
              "type": "string"
            },
            "example": "social or cpc or encounter"
          },
          {
            "name": "feedTypes",
            "in": "query",
            "schema": {
              "type": "string"
            },
            "example": "social or cpc or encounter"
          },
          {
            "name": "feedTypes",
            "in": "query",
            "schema": {
              "type": "string"
            },
            "example": "social or cpc or encounter"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                },
                "example": {
                  "results": [
                    {
                      "feedId": 110627,
                      "linkUuid": "8cb6bb2b-49a2-44b0-9ee0-d280002fcbf9",
                      "name": "encounter",
                      "description": "here name descripbes feedTypes (it can be social , encounter and cpc).",
                      "encounterUuid": "8cb6bb2b-49a2-44b0-9ee0-d280002fcbf9",
                      "senderDisplay": "nick henry",
                      "senderUuid": "971af416-1491-4a61-9b6c-b8ee1698eede",
                      "receiverDisplay": "mayank patil",
                      "receiverUuid": "f1ec5551-3531-4157-91a6-1995a6ba1104",
                      "personId": 78518,
                      "personRoleId": 1,
                      "raxaSubFeedList": [
                        {
                          "id": 89908,
                          "name": "encounter",
                          "description": null,
                          "feedType": "obs",
                          "subFeedData": "{\"uuid\":\"d4c48844-8c6e-4c67-a483-70c0b86e1aac\",\"obsDatetime\":\"26 Oct 2023 08:40:28 GMT\",\"value\":\"Test Encounter\",\"concept\":{\"conceptClass\":{\"name\":\"Question\",\"description\":\"Question (eg, patient history, SF36 items)\",\"uuid\":\"8d491e50-c2cc-11de-8d13-0010c6dffd0f\"},\"datatype\":{\"uuid\":\"8d4a4ab4-c2cc-11de-8d13-0010c6dffd0f\",\"description\":\"Free text\",\"name\":\"Text\"},\"names\":[{\"name\":\"Free text general\",\"uuid\":\"109086BBBBBBBBBBBBBBBBBBBBBBBBBBBBBB\"}],\"uuid\":\"160632AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\"},\"comment\":\"1\",\"order\":null}",
                          "linkUuid": "8cb6bb2b-49a2-44b0-9ee0-d280002fcbf9",
                          "seen": null,
                          "creator": null,
                          "dateCreated": null,
                          "changedBy": null,
                          "dateChanged": null,
                          "voided": false,
                          "dateVoided": null,
                          "voidedBy": null,
                          "voidReason": null,
                          "uuid": "d4c48844-8c6e-4c67-a483-70c0b86e1aac"
                        },
                        {
                          "id": 89909,
                          "name": "encounter",
                          "description": null,
                          "feedType": "drugOrder",
                          "subFeedData": "{\"uuid\":\"a72573e6-58c4-4d94-b8d7-7c7cc74343a2\",\"orderer\":\"nick henry\",\"orderType\":{\"uuid\":\"131168f4-15f5-102d-96e4-000c29c2a5d7\",\"display\":\"Drug Order\"},\"instructions\":\"#specificReqFlag#Tablet\",\"startDate\":\"26 Oct 2023 08:40:28 GMT\",\"autoExpireDate\":\"31 Oct 2023 08:40:28 GMT\",\"dose\":\"500mg\",\"units\":\"Capsule\",\"frequency\":\"Every twenty-four hours\",\"quantity\":5.0,\"drug\":{\"uuid\":\"raxa0000000000000000000000000003007708\",\"display\":\"CROCIN\",\"dosage\":\"500mg\",\"units\":\"Capsule\"}}",
                          "linkUuid": "8cb6bb2b-49a2-44b0-9ee0-d280002fcbf9",
                          "seen": null,
                          "creator": null,
                          "dateCreated": null,
                          "changedBy": null,
                          "dateChanged": null,
                          "voided": false,
                          "dateVoided": null,
                          "voidedBy": null,
                          "voidReason": null,
                          "uuid": "a72573e6-58c4-4d94-b8d7-7c7cc74343a2"
                        }
                      ],
                      "likes": [],
                      "comments": [],
                      "feedSecurityGroupId": null,
                      "creator": null,
                      "dateCreated": "Oct 26, 2023 8:41:51 AM",
                      "changedBy": null,
                      "dateChanged": null,
                      "voided": false,
                      "dateVoided": null,
                      "voidedBy": null,
                      "voidReason": null,
                      "uuid": "2db374f0-e22a-48bd-884b-437ed1937da3"
                    }
                  ]
                }
              }
            }
          }
        },
        "security": [
          {
            "Basic_Auth": []
          }
        ]
      }
    },
    "/hip/authenticate": {
      "post": {
        "tags": [
          "HIP"
        ],
        "summary": "Authenticate",
        "description": "This endpoint is used to authenticate a user by providing the auth code.",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AuthRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "Basic_Auth": []
          }
        ]
      },
      "get": {
        "tags": [
          "HIP"
        ],
        "summary": "HIP Authenticate and Retrieve Patient Information",
        "description": "This endpoint authenticates the request and retrieves patient information based on the provided request ID and date code.\n",
        "operationId": "authenticateAndRetrievePatientInfo",
        "parameters": [
          {
            "$ref": "#/components/parameters/ReqId"
          }
        ],
        "responses": {
          "200": {
            "description": "Patient information retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthenticateResponse"
                },
                "examples": {
                  "AuthenticateResponseExample": {
                    "value": {
                      "requestId": "c2942611-2db7-4a51-9095-963af9f28e29",
                      "patientInfo": "{\"id\":\"shivamprod1@abdm\",\"name\":\"Shivam Choudhary\",\"gender\":\"M\",\"yearOfBirth\":2002,\"monthOfBirth\":4,\"dayOfBirth\":10, \"address\":{\"line\":null,\"district\":\"BIJNOR\",\"state\":\"UTTAR PRADESH\",\"pincode\":null}, \"identifiers\":[{\"type\":\"MOBILE\",\"value\":\"7088595874\"},{\"type\":\"HEALTH_NUMBER\",\"value\":\"91-1657-3531-5419\"}]}"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/hip/initauth": {
      "post": {
        "tags": [
          "HIP"
        ],
        "summary": "Initialize Authentication",
        "description": "This endpoint is used to initiate authentication via mobile OTP.",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/InitAuthRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InitAuthResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "Basic_Auth": []
          }
        ]
      }
    },
    "/hip/validateHealthId": {
      "get": {
        "tags": [
          "HIP"
        ],
        "summary": "Validate Health ID",
        "description": "This endpoint is used to validate a health ID within the Raxa system. It returns a success message if the health ID is valid.\n",
        "operationId": "validateHealthId",
        "parameters": [
          {
            "name": "reqId",
            "in": "query",
            "required": true,
            "description": "Request ID associated with the health ID validation request",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Health ID validation response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HealthIdValidationResponse"
                },
                "examples": {
                  "HealthIdValidationSuccess": {
                    "value": {
                      "message": "Success"
                    }
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "Basic_Auth": []
          }
        ]
      }
    },
    "/hip/patient/v2/healthId": {
      "get": {
        "tags": [
          "HIP"
        ],
        "summary": "Retrieve Health ID",
        "description": "This endpoint retrieves the Health ID associated with a given patient and location.\n",
        "operationId": "getHealthId",
        "parameters": [
          {
            "name": "patient",
            "in": "query",
            "required": true,
            "description": "The UUID of the patient for whom the Health ID is being retrieved.",
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "location",
            "in": "query",
            "required": true,
            "description": "The UUID of the location associated with the patient's Health ID.",
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully retrieved the Health ID",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HealthIdResponse"
                },
                "examples": {
                  "HealthIdExample": {
                    "value": {
                      "healthId": "changed@abdm"
                    }
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "Basic_Auth": []
          }
        ]
      }
    },
    "/hiu/consent/provider/{providerUuid}": {
      "get": {
        "tags": [
          "HIU"
        ],
        "summary": "Get Consents for Provider",
        "description": "This endpoint retrieves all patient consents associated with a specific provider, identified by the provider's UUID.\n",
        "operationId": "getConsentsForProvider",
        "parameters": [
          {
            "$ref": "#/components/parameters/ProviderPersonUuidParam"
          }
        ],
        "responses": {
          "200": {
            "description": "Patient consents retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProviderConsentsResponse"
                },
                "examples": {
                  "ProviderConsentsExample": {
                    "value": {
                      "result": [
                        {
                          "consentStartDate": "2022-08-01 00:00:00.0",
                          "purpose": "Public Health",
                          "healthId": "chughrahul1996@abdm",
                          "consentId": null,
                          "consentRequestId": "84f62163-755b-4440-8730-d668a2690a41",
                          "hiTypes": [
                            "OPConsultation",
                            "DischargeSummary",
                            "Prescription",
                            "DiagnosticReport",
                            "ImmunizationRecord"
                          ],
                          "requestId": "1c734135-3fab-4ebf-b48b-f2165ca0bbe6",
                          "patient": {
                            "uuid": "f4f940a0-f1f5-11ec-ad13-a774d62c712d",
                            "id": 72158,
                            "display": "S. Ran S. Ran",
                            "gender": "M",
                            "age": 29,
                            "birthdate": 757382400000,
                            "healthCenter": "887"
                          },
                          "location": "a772afbd-2e93-48d7-af6a-e86a92151625",
                          "consentEndDate": "2022-08-24 23:59:59.0",
                          "consentCreatedOn": "2022-08-24 09:05:01.0",
                          "status": "REQUESTED",
                          "consentExpiryDate": "2022-08-31 08:30:00.0"
                        }
                      ]
                    }
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "Basic_Auth": []
          }
        ]
      }
    },
    "/hiu/consent/request/init": {
      "post": {
        "tags": [
          "HIU"
        ],
        "summary": "Initiate Consent Request",
        "description": "This endpoint initiates a consent request for a patient, specifying the provider, location, time period, purpose, and types of health information required.\n",
        "operationId": "initiateConsentRequest",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ConsentRequest"
              },
              "examples": {
                "ConsentRequestExample": {
                  "value": {
                    "provider": "931d5bb5-773f-4ffd-b0f7-4a2bb6a5488d",
                    "patient": "b97a6034-c23f-4285-9112-576d0e387125",
                    "location": "d09e8ede-1930-48e4-87d2-415d3283fb6d",
                    "from": "2023-10-27T00:00:00.000Z",
                    "to": "2023-10-27T00:00:00.000Z",
                    "dataEraseAt": "2023-10-28T00:00:00.000Z",
                    "purpose": "CAREMGT",
                    "hiTypes": [
                      "OPConsultation",
                      "DiagnosticReport",
                      "ImmunizationRecord",
                      "Prescription",
                      "DischargeSummary"
                    ]
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Consent request initiated successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ConsentRequestResponse"
                },
                "examples": {
                  "ConsentRequestResponseExample": {
                    "value": {
                      "requestId": "5aa64e14-997f-4893-981c-84833ba60121",
                      "sentSuccessfull": true
                    }
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "Basic_Auth": []
          }
        ]
      }
    },
    "/login/session": {
      "get": {
        "tags": [
          "Login"
        ],
        "summary": "Get call to create session.",
        "description": "This call will return the session details of the user who is logged in.\n",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                },
                "example": {
                  "sessionId": "1D7F5A7F4A78431563FEBC9A0EAC23EA",
                  "authenticated": true,
                  "user": {
                    "uuid": "312db8ae-f960-4902-b165-0ffdfe212bb2",
                    "display": "nick.henry",
                    "username": "nick.henry",
                    "systemId": "33655-2",
                    "userProperties": {
                      "loginAttempts": "0",
                      "defaultLocation": "79550"
                    },
                    "person": {
                      "uuid": "971af416-1491-4a61-9b6c-b8ee1698eede",
                      "display": "nick henry",
                      "links": [
                        {
                          "rel": "self",
                          "uri": "http://demo.raxa.io:8085/api/ws/rest/v1/person/971af416-1491-4a61-9b6c-b8ee1698eede"
                        }
                      ]
                    },
                    "privileges": [
                      {
                        "uuid": "81ab1d99-4318-11e2-920d-70f39542ef8f",
                        "display": "Edit Cohorts",
                        "description": "Ability to edit cohorts. and thier can be multiple other privileges also possible.",
                        "links": [
                          {
                            "rel": "self",
                            "uri": "http://demo.raxa.io:8085/api/ws/rest/v1/privilege/81ab1d99-4318-11e2-920d-70f39542ef8f"
                          }
                        ]
                      }
                    ],
                    "roles": [
                      {
                        "uuid": "8d94f280-c2cc-11de-8d13-0010c6dffd0f",
                        "display": "Provider",
                        "links": [
                          {
                            "rel": "self",
                            "uri": "http://demo.raxa.io:8085/api/ws/rest/v1/role/8d94f280-c2cc-11de-8d13-0010c6dffd0f"
                          }
                        ]
                      }
                    ],
                    "retired": false,
                    "links": [
                      {
                        "rel": "self",
                        "uri": "http://demo.raxa.io:8085/api/ws/rest/v1/user/312db8ae-f960-4902-b165-0ffdfe212bb2"
                      },
                      {
                        "rel": "full",
                        "uri": "http://demo.raxa.io:8085/api/ws/rest/v1/user/312db8ae-f960-4902-b165-0ffdfe212bb2?v=full"
                      }
                    ],
                    "resourceVersion": "1.8"
                  },
                  "locale": "en",
                  "allowedLocales": [
                    "en",
                    "es",
                    "fr",
                    "it",
                    "pt_BR"
                  ]
                }
              }
            }
          }
        },
        "security": [
          {
            "Basic_Auth": []
          }
        ]
      }
    },
    "/login": {
      "get": {
        "tags": [
          "Login"
        ],
        "summary": "Login call -( provide all the details of the login person )",
        "description": "This call is used to login to the system. It returns the details of the person who is logged in.",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                },
                "example": {
                  "personUuid": "971af416-1491-4a61-9b6c-b8ee1698eede",
                  "selfPatientUuid": "9624a133-5cd2-4b16-b597-db0e9c67f86c",
                  "isSuperUser": "false",
                  "personId": 78518,
                  "providerUuid": "d075d480-3c34-4ad9-b777-0b03aaddfd2d",
                  "providerAttributes": [
                    {
                      "attributeType": "MCI Number",
                      "value": "9953"
                    },
                    {
                      "attributeType": "PhoneNumberVerified",
                      "value": true
                    },
                    {
                      "attributeType": "Designation",
                      "value": "doctor"
                    },
                    {
                      "attributeType": "Virtual Payment Address",
                      "value": "sumit@paytm"
                    }
                  ],
                  "personAttributes": [
                    {
                      "attributeType": "Health Center",
                      "value": "79550",
                      "dateCreated": "Jun 27, 2023 10:25:23 AM"
                    },
                    {
                      "attributeType": "Primary Contact",
                      "value": "9900000000",
                      "dateCreated": "Jun 27, 2023 10:25:23 AM"
                    },
                    {
                      "attributeType": "Email",
                      "value": "nick.henry@raxa.com",
                      "dateCreated": "Jun 27, 2023 10:25:23 AM"
                    },
                    {
                      "attributeType": "Country",
                      "value": "India",
                      "dateCreated": "Jun 27, 2023 10:25:23 AM"
                    },
                    {
                      "attributeType": "Auth",
                      "value": "kNfUZTQIdyTirCd40V9rHJmTCPpZD+yF4Y9UKtgItDStvFaEx8bk1k1zMDAAtF3A",
                      "dateCreated": "Jun 27, 2023 10:25:23 AM"
                    },
                    {
                      "attributeType": "ABHA number",
                      "value": "10-0000-0000-01",
                      "dateCreated": "Aug 25, 2023 7:58:16 AM"
                    }
                  ],
                  "display": "nick henry",
                  "firstName": "nick",
                  "lastName": "henry",
                  "gender": "M",
                  "age": 0,
                  "dob": "Jun 27, 2023 12:00:00 AM",
                  "prefix": null,
                  "isPatient": false,
                  "location": "7b81bdd2-5c2b-4e8f-816d-3e2c9df88179",
                  "locationAddress": {
                    "name": "ef12454b-6b45-4548-a91b-a99aa5908f5a",
                    "address1": null,
                    "address2": null,
                    "cityVillage": null,
                    "stateProvince": null,
                    "country": null,
                    "latitude": null,
                    "longitude": null
                  },
                  "roles": [
                    "Provider"
                  ],
                  "privileges": []
                }
              }
            }
          }
        },
        "security": [
          {
            "Basic_Auth": []
          }
        ]
      },
      "post": {
        "summary": "user Login",
        "description": "Allows healthcare providers to login into the system. This endpoint authenticates the provider and returns relevant user information.\n",
        "operationId": "loginUser",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "q": {
                    "type": "string",
                    "description": "Username of the provider.",
                    "example": "nick.henry"
                  },
                  "passWord": {
                    "type": "string",
                    "description": "Password for the provider account.",
                    "example": "nickhenry"
                  },
                  "isProvider": {
                    "type": "string",
                    "description": "Flag to indicate if the user is a provider.",
                    "enum": [
                      "true",
                      "false"
                    ],
                    "example": "true"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successfully authenticated the provider.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "users": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "username": {
                            "type": "string",
                            "example": "nick.henry"
                          },
                          "name": {
                            "type": "string",
                            "example": "nick henry"
                          },
                          "location": {
                            "type": "string",
                            "example": "ff98ff64-0c52-490d-aca2-f29335cc7bca"
                          }
                        }
                      }
                    },
                    "status": {
                      "type": "string",
                      "example": "success"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request. Invalid input parameters."
          },
          "401": {
            "description": "Unauthorized. Incorrect login credentials."
          }
        }
      }
    },
    "/message/initialMessages": {
      "get": {
        "tags": [
          "Message"
        ],
        "summary": "Retrieve Initial Messages",
        "description": "This endpoint retrieves the initial set of messages for the user in the Raxa system.\n",
        "operationId": "getInitialMessages",
        "parameters": [
          {
            "name": "_dc",
            "in": "query",
            "required": true,
            "description": "Timestamp parameter to ensure cache busting",
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Initial messages retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Message"
                  }
                },
                "examples": {
                  "InitialMessagesExample": {
                    "value": [
                      {
                        "date": "1 Apr 2015 09:29:53 GMT",
                        "synced": "",
                        "person_uuid": "706d46cd-cea3-4c46-8ffc-0057d6510270",
                        "name": "ASNEHARA ASNEHARA",
                        "action": "message",
                        "message_id": "13091",
                        "message_type": null,
                        "message": "yes\n",
                        "uuid": "7ae934c0-05d1-0612-ca25-587270bf4c00",
                        "seen": "",
                        "group_recipient_uuid": "54d1a8f3-6943-7c0b-4b68-38e5285d8092"
                      }
                    ]
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "Basic_Auth": []
          }
        ]
      }
    },
    "/message/loadMore": {
      "get": {
        "tags": [
          "Message"
        ],
        "summary": "Load More Messages",
        "description": "This endpoint retrieves additional messages from a specific message group, based on the provided offset.\n",
        "operationId": "loadMoreMessages",
        "parameters": [
          {
            "name": "groupUuid",
            "in": "query",
            "required": true,
            "description": "The UUID of the message group from which to retrieve additional messages.",
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "offset",
            "in": "query",
            "required": true,
            "description": "The offset value to determine which messages to retrieve.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "_dc",
            "in": "query",
            "required": true,
            "description": "A unique identifier for the request, usually a timestamp.",
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully retrieved additional messages",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Message"
                  }
                },
                "examples": {
                  "LoadMoreMessagesExample": {
                    "value": [
                      {
                        "date": "28 Jul 2023 10:26:17 GMT",
                        "synced": "",
                        "person_uuid": "971af416-1491-4a61-9b6c-b8ee1698eede",
                        "name": "nick henry",
                        "action": "message",
                        "message_id": "81108",
                        "message": "maggie works happily hi",
                        "uuid": "44a2620d-f14c-4dfc-83da-6c25c23a2bcd",
                        "seen": "",
                        "group_recipient_uuid": "5b36c375-3017-44c2-abb9-b5927e12dd9d"
                      }
                    ]
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "Basic_Auth": []
          }
        ]
      }
    },
    "/patient": {
      "get": {
        "tags": [
          "Patient"
        ],
        "summary": "Find patients only if a search query is provided\n",
        "description": "Searches for patients which have a search query - for example, \"p=phonenumber\"\n",
        "parameters": [
          {
            "$ref": "#/components/parameters/searchByPhoneNumber"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/getPatientBySearch"
          }
        },
        "security": [
          {
            "Basic_Auth": []
          }
        ]
      }
    },
    "/patient/v2": {
      "post": {
        "tags": [
          "Patient"
        ],
        "summary": "Endpoint for creating a new patient record.\n",
        "description": "This endpoint is used for creating a new patient record in the Raxa system. The request body must be a properly formatted JSON object that follows strict syntax rules. Failure to adhere to proper JSON syntax, including the correct use of double quotes and commas, will result in a JSONDecodeError.\n\n All JSON property names (keys) must be enclosed in double quotes.\n String values must also be enclosed in double quotes.\n Objects and arrays must be properly opened and closed with curly braces or square brackets, respectively.\n Each property name and value pair must be separated by a colon.\n Pairs should be followed by a comma if followed by another pair. Be cautious of trailing commas at the end of objects or arrays; these can cause parsing errors.\n\n\n Example of a properly formatted request body:\n \"\n {\n \"age\": 25; replace the default value with the value given in the input.\n \"attributes\": [\n     {\n     \"attributeType\": \"raxa00000-0000-0000-0000-000000000010\",\n     \"value\": \"9876543210\" // Replace this with the mobile number provided in the input; otherwise, keep it as the default.\n     },\n     {\n     \"attributeType\": \"raxa00000-0000-0000-0000-000000000018\",\n     \"value\": \"dummy1.dummy2@raxa.com\" // Replace this with the email provided in the input; otherwise, keep it as the default.\n     }\n     ],\n \"gender\": \"M\"; replace the default value with the value given in the input.\n \"names\": [\n     {\n     \"givenName\": \"Dummy1\", Replace this with the first name.\n     \"familyName\": \"Dummy2\"; replace it with the last name.\n     }\n     ]\n } \n \"\n",
        "requestBody": {
          "required": true,
          "description": "This is a template UUID string to be replaced by the actual UUID string required.\n",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PatientV2"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Patient record created successfully.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PatientResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad request"
          },
          "404": {
            "description": "Patient not found"
          }
        },
        "security": [
          {
            "Basic_Auth": []
          }
        ]
      }
    },
    "/patient/patientdetails": {
      "post": {
        "tags": [
          "Patient"
        ],
        "summary": "Get patient details by UUID",
        "description": "This endpoint allows you to retrieve patient details by providing the patient's UUID and security group ID.\n",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "patientUuid": {
                    "type": "string",
                    "example": "9815d6ce-17cb-48e5-9654-f5cad08ee122"
                  },
                  "securityGroupId": {
                    "type": "string",
                    "example": "32"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful response with patient details",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "incare": {
                      "type": "boolean",
                      "example": false
                    },
                    "personAttributes": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "attributeUuid": {
                            "type": "string",
                            "example": "8d87236c-c2cc-11de-8d13-0010c6dffd0f"
                          },
                          "attributeType": {
                            "type": "string",
                            "example": "Health Center"
                          },
                          "value": {
                            "type": "string",
                            "example": "82189"
                          }
                        }
                      }
                    },
                    "personAddress": {
                      "type": "string",
                      "example": ""
                    },
                    "givenName": {
                      "type": "string",
                      "example": "pranav"
                    },
                    "familyName": {
                      "type": "string",
                      "example": "rai"
                    },
                    "prefix": {
                      "type": "string",
                      "example": null
                    },
                    "age": {
                      "type": "integer",
                      "example": 26
                    },
                    "birthdate": {
                      "type": "string",
                      "example": "Jan 1, 1997 12:00:00 AM"
                    },
                    "gender": {
                      "type": "string",
                      "example": "M"
                    },
                    "weight": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "uuid": {
                            "type": "string",
                            "example": "8f434224-1a02-46e5-a985-212abba20893"
                          },
                          "obsDatetime": {
                            "type": "string",
                            "example": "2 Nov 2023 08:10:32 GMT"
                          },
                          "value": {
                            "type": "string",
                            "example": "70.0"
                          },
                          "concept": {
                            "type": "object",
                            "properties": {
                              "conceptClass": {
                                "type": "object",
                                "properties": {
                                  "name": {
                                    "type": "string",
                                    "example": "Finding"
                                  },
                                  "description": {
                                    "type": "string",
                                    "example": "Practitioner observation/finding"
                                  },
                                  "uuid": {
                                    "type": "string",
                                    "example": "8d491a9a-c2cc-11de-8d13-0010c6dffd0f"
                                  }
                                }
                              },
                              "datatype": {
                                "type": "object",
                                "properties": {
                                  "uuid": {
                                    "type": "string",
                                    "example": "8d4a4488-c2cc-11de-8d13-0010c6dffd0f"
                                  },
                                  "description": {
                                    "type": "string",
                                    "example": "Numeric value, including integer or float (e.g., creatinine, weight)"
                                  },
                                  "name": {
                                    "type": "string",
                                    "example": "Numeric"
                                  }
                                }
                              },
                              "names": {
                                "type": "array",
                                "items": {
                                  "type": "object",
                                  "properties": {
                                    "name": {
                                      "type": "string",
                                      "example": "Weight (kg)"
                                    },
                                    "uuid": {
                                      "type": "string",
                                      "example": "2191BBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBB"
                                    }
                                  }
                                }
                              },
                              "uuid": {
                                "type": "string",
                                "example": "5089AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA"
                              }
                            }
                          },
                          "comment": {
                            "type": "string",
                            "example": null
                          },
                          "order": {
                            "type": "string",
                            "example": null
                          }
                        }
                      }
                    },
                    "height": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "uuid": {
                            "type": "string",
                            "example": "875ebe26-efa5-45bb-9087-4232dadf74c2"
                          },
                          "obsDatetime": {
                            "type": "string",
                            "example": "2 Nov 2023 08:10:32 GMT"
                          },
                          "value": {
                            "type": "string",
                            "example": "176.0"
                          },
                          "concept": {
                            "type": "object",
                            "properties": {
                              "conceptClass": {
                                "type": "object",
                                "properties": {
                                  "name": {
                                    "type": "string",
                                    "example": "Finding"
                                  },
                                  "description": {
                                    "type": "string",
                                    "example": "Practitioner observation/finding"
                                  },
                                  "uuid": {
                                    "type": "string",
                                    "example": "8d491a9a-c2cc-11de-8d13-0010c6dffd0f"
                                  }
                                }
                              },
                              "datatype": {
                                "type": "object",
                                "properties": {
                                  "uuid": {
                                    "type": "string",
                                    "example": "8d4a4488-c2cc-11de-8d13-0010c6dffd0f"
                                  },
                                  "description": {
                                    "type": "string",
                                    "example": "Numeric value, including integer or float (e.g., creatinine, height)"
                                  },
                                  "name": {
                                    "type": "string",
                                    "example": "Numeric"
                                  }
                                }
                              },
                              "names": {
                                "type": "array",
                                "items": {
                                  "type": "object",
                                  "properties": {
                                    "name": {
                                      "type": "string",
                                      "example": "Height (cm)"
                                    },
                                    "uuid": {
                                      "type": "string",
                                      "example": "2194BBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBB"
                                    }
                                  }
                                }
                              },
                              "uuid": {
                                "type": "string",
                                "example": "5090AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA"
                              }
                            }
                          },
                          "comment": {
                            "type": "string",
                            "example": null
                          },
                          "order": {
                            "type": "string",
                            "example": null
                          }
                        }
                      }
                    },
                    "finalDiagnosis": {
                      "type": "array",
                      "items": {}
                    },
                    "respiratoryRate": {
                      "type": "array",
                      "items": {}
                    },
                    "pulse": {
                      "type": "array",
                      "items": {}
                    },
                    "temperature": {
                      "type": "array",
                      "items": {}
                    },
                    "systolicBP": {
                      "type": "array",
                      "items": {}
                    },
                    "diastolicBP": {
                      "type": "array",
                      "items": {}
                    },
                    "bloodOxySat": {
                      "type": "array",
                      "items": {}
                    },
                    "patientStatus": {
                      "type": "array",
                      "items": {}
                    },
                    "order": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "uuid": {
                            "type": "string",
                            "example": "c70c6b99-730c-46c8-bc62-cbad7a446719"
                          },
                          "orderer": {
                            "type": "string",
                            "example": "nick henry"
                          },
                          "orderType": {
                            "type": "object",
                            "properties": {
                              "uuid": {
                                "type": "string",
                                "example": "131168f4-15f5-102d-96e4-000c29c2a5d7"
                              },
                              "display": {
                                "type": "string",
                                "example": "Drug Order"
                              }
                            }
                          },
                          "instructions": {
                            "type": "string",
                            "example": "#specificReqFlag#Tablet"
                          },
                          "startDate": {
                            "type": "string",
                            "example": "2 Nov 2023 08:56:21 GMT"
                          },
                          "autoExpireDate": {
                            "type": "string",
                            "example": null
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/patientlist/myPatientsV5": {
      "post": {
        "tags": [
          "PatientList"
        ],
        "summary": "provide the List of patients of a provider",
        "description": "Don't use any other call to get the complete list of patients for the current logged-in user. (e.g., if a query is like, Get me the list of my patients or similar queries, then please use this endpoint only.) \nThis endpoint fetches the list of all the patients of a given provider in chunks. It does not require the patient's ID to fetch its details. It also returns the list of patients that should be removed, if any. This call alone is sufficient to fetch all the patients from a provider. (Just send an empty array for both oldPatientsList and groupIds.)\n",
        "operationId": "allPatientsOfProviderV5",
        "parameters": [
          {
            "in": "query",
            "name": "chunkSize",
            "schema": {
              "type": "string"
            },
            "description": "Size of the chunk to fetch patients. It can be numeric or 'full' to fetch all patients at once.",
            "required": true
          }
        ],
        "requestBody": {
          "description": "Request body containing OPTIONAL (you can send both as empty arrays-> []) filtering parameters like oldPatientsList and groupIds",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PatientListRequestV5"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Returns the list of patients for a provider, and list of patients that should be removed if any.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PatientListResponseV5"
                }
              }
            }
          }
        },
        "security": [
          {
            "Basic_Auth": []
          }
        ]
      }
    },
    "/patient/abha/delink": {
      "post": {
        "tags": [
          "Patient"
        ],
        "summary": "Delink a patient's ABHA details",
        "operationId": "delinkAbhaDetails",
        "requestBody": {
          "description": "Data to delink a patient's ABHA details",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DelinkAbhaRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DelinkAbhaResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "Basic_Auth": []
          }
        ]
      }
    },
    "/patientlist": {
      "post": {
        "tags": [
          "PatientList"
        ],
        "summary": "Save New PatientList",
        "description": "This endpoint allows you to create a new patient list in the system.",
        "operationId": "createNewPatientList",
        "requestBody": {
          "description": "Patient list object that needs to be added",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PatientListRequest"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Patient list created successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PatientListResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "Basic_Auth": []
          }
        ]
      },
      "get": {
        "tags": [
          "PatientList"
        ],
        "summary": "Get All Unretired Patient Lists",
        "description": "This endpoint allows you to get all unretired patient lists in the system.",
        "operationId": "getAllPatientLists",
        "responses": {
          "200": {
            "description": "A list of all unretired patient lists.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PatientListArrayResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "Basic_Auth": []
          }
        ]
      }
    },
    "/patientlist/{uuid}": {
      "post": {
        "tags": [
          "PatientList"
        ],
        "summary": "Updates an existing patient list",
        "description": "Update the name, description, and optional search query of a patient list based on the provided UUID.",
        "operationId": "updatePatientList",
        "parameters": [
          {
            "name": "uuid",
            "in": "path",
            "description": "UUID of the patient list to be updated",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "Patient list details to be updated",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PatientListUpdateRequest"
              }
            }
          }
        },
        "responses": {
          "204": {
            "description": "Successful operation with no content in response."
          },
          "400": {
            "description": "Invalid input or missing parameters"
          }
        }
      },
      "get": {
        "tags": [
          "PatientList"
        ],
        "summary": "Gets Full representation of Patient Lists for the uuid path",
        "parameters": [
          {
            "name": "uuid",
            "in": "path",
            "required": true,
            "description": "The UUID of the patient",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "v",
            "in": "query",
            "required": true,
            "description": "The representation level (e.g., \"full\")",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PatientFullRepresentation"
                }
              }
            }
          },
          "400": {
            "description": "Bad request"
          },
          "404": {
            "description": "Patient not found"
          }
        },
        "security": [
          {
            "Basic_Auth": []
          }
        ]
      }
    },
    "/patientlist/updatePatientListV2": {
      "post": {
        "tags": [
          "PatientList"
        ],
        "summary": "Updates an existing patient list",
        "description": "Update the list of patients based on the provided list and chunkSize.",
        "operationId": "getPatientsByIdArray",
        "parameters": [
          {
            "name": "chunkSize",
            "in": "query",
            "description": "Size of the patient chunk, \"full\" for all, or a specific integer value.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "List of old patients",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "type": "string"
                },
                "description": "List of patient IDs"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UpdatePatientResponse"
                }
              }
            }
          },
          "400": {
            "description": "Invalid input or missing parameters"
          }
        },
        "security": [
          {
            "Basic_Auth": []
          }
        ]
      }
    },
    "/patientlist/updatePatientListV4": {
      "post": {
        "tags": [
          "PatientList"
        ],
        "summary": "Updates an existing incare or all patient list",
        "description": "Update the list of incare patients based on the provided old patient list and chunkSize.",
        "operationId": "getPatientsByIdArrayIncare",
        "parameters": [
          {
            "name": "chunkSize",
            "in": "query",
            "description": "Size of the patient chunk, \"full\" for all, or a specific integer value.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "Data to update the patient list",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateInCarePatientRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UpdateInCarePatientResponse"
                }
              }
            }
          },
          "400": {
            "description": "Invalid input or missing parameters"
          }
        },
        "security": [
          {
            "Basic_Auth": []
          }
        ]
      }
    },
    "/payment/getBlockAmount": {
      "get": {
        "tags": [
          "Payment"
        ],
        "summary": "Get Blocked Amount",
        "description": "Retrieve the amount that is currently blocked for a specific user based on their UUID.\n",
        "operationId": "getBlockAmount",
        "parameters": [
          {
            "name": "uuid",
            "in": "query",
            "required": true,
            "description": "The UUID of the user.",
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Amount retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "amount": {
                      "type": "integer",
                      "description": "The amount that is currently blocked."
                    }
                  },
                  "example": {
                    "amount": 100
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "Basic_Auth": []
          }
        ]
      }
    },
    "/payment/checkStatus/{appointmentId}": {
      "post": {
        "tags": [
          "Payment"
        ],
        "summary": "Check Payment Status",
        "description": "Check the payment status for a specific appointment based on the appointment ID.\n",
        "operationId": "checkPaymentStatus",
        "parameters": [
          {
            "name": "appointmentId",
            "in": "path",
            "required": true,
            "description": "The ID of the appointment.",
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "provider": {
                    "type": "string",
                    "format": "uuid",
                    "description": "The UUID of the provider."
                  }
                },
                "required": [
                  "provider"
                ]
              },
              "example": {
                "provider": "0998901c-785f-437a-91f4-b9d5d35a099b"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Payment status retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "description": "The payment status."
                    }
                  },
                  "example": {
                    "status": "Paid"
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "Basic_Auth": []
          }
        ]
      }
    },
    "/payment/authorize": {
      "post": {
        "tags": [
          "Payment"
        ],
        "summary": "Authorize Payment",
        "description": "Authorize a payment based on the provided payment details.\n",
        "operationId": "authorizePayment",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "order_id": {
                    "type": "string",
                    "description": "The ID of the order."
                  },
                  "payment_id": {
                    "type": "string",
                    "description": "The ID of the payment."
                  },
                  "payment_signature": {
                    "type": "string",
                    "description": "The payment signature."
                  },
                  "provider": {
                    "type": "string",
                    "format": "uuid",
                    "description": "The UUID of the provider."
                  }
                },
                "required": [
                  "order_id",
                  "payment_id",
                  "payment_signature",
                  "provider"
                ]
              },
              "example": {
                "order_id": "order_MuLa2pV7uZTVfR",
                "payment_id": "pay_MuLcc82yEmP9L1",
                "payment_signature": "49985edc29fb1ec0c40add198442b4140f8ba0d271df14dde16980e5db3ebfa6",
                "provider": "0998901c-785f-437a-91f4-b9d5d35a099b"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Payment authorized successfully",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string",
                  "example": "success"
                }
              }
            }
          }
        },
        "security": [
          {
            "Basic_Auth": []
          }
        ]
      }
    },
    "/payment/orders": {
      "post": {
        "tags": [
          "Payment"
        ],
        "summary": "Create Payment Order",
        "description": "Create a new payment order based on the provided appointment, amount, and provider details.\n",
        "operationId": "createPaymentOrder",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "appointment": {
                    "type": "string",
                    "format": "uuid",
                    "description": "The UUID of the appointment."
                  },
                  "amount": {
                    "type": "integer",
                    "description": "The amount to be paid in smallest currency unit (e.g., cents, paise)."
                  },
                  "provider": {
                    "type": "string",
                    "format": "uuid",
                    "description": "The UUID of the provider."
                  }
                },
                "required": [
                  "appointment",
                  "amount",
                  "provider"
                ]
              },
              "example": {
                "appointment": "1b0d1509-c809-45d3-9a5e-cd170e875a69",
                "amount": 20000,
                "provider": "0998901c-785f-437a-91f4-b9d5d35a099b"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Payment order created successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "key_id": {
                      "type": "string",
                      "description": "The key ID associated with the payment gateway."
                    },
                    "order_id": {
                      "type": "string",
                      "description": "The order ID generated for the payment."
                    }
                  },
                  "required": [
                    "key_id",
                    "order_id"
                  ]
                },
                "example": {
                  "key_id": "rzp_test_EYFlODS5ANepbd",
                  "order_id": "order_MuLa2pV7uZTVfR"
                }
              }
            }
          }
        },
        "security": [
          {
            "Basic_Auth": []
          }
        ]
      }
    },
    "/phr/register/aadhaar/otpRequest": {
      "post": {
        "tags": [
          "PHR"
        ],
        "summary": "Request for an Aadhaar registration OTP.\n",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AadhaarOtpRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OTP request successful",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AadhaarOtpResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad request"
          }
        },
        "security": [
          {
            "Basic_Auth": []
          }
        ]
      }
    },
    "/phr/register/aadhaar/otpVerify": {
      "post": {
        "tags": [
          "PHR"
        ],
        "summary": "Verify Aadhar Requested OTP.\n",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/VerifyOtpRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OTP request successful",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AadhaarOtpResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad request"
          }
        },
        "security": [
          {
            "Basic_Auth": []
          }
        ]
      }
    },
    "/phr/register/aadhaar/mobile/otpRequest": {
      "post": {
        "tags": [
          "PHR"
        ],
        "summary": "Mobile OTP Request.\n",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/MobileOtpRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OTP request successful",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AadhaarOtpResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad request"
          }
        },
        "security": [
          {
            "Basic_Auth": []
          }
        ]
      }
    },
    "/phr/register/aadhaar/mobile/otpVerify": {
      "post": {
        "tags": [
          "PHR"
        ],
        "summary": "Verify Mobile Requested OTP.\n",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/VerifyOtpRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OTP request successful",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AadhaarOtpResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad request"
          }
        },
        "security": [
          {
            "Basic_Auth": []
          }
        ]
      }
    },
    "/phr/register/aadhaar/confirm/preverified": {
      "post": {
        "tags": [
          "PHR"
        ],
        "summary": "Gives the preverified data of the patient.\n",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "txnId": {
                    "type": "string"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Response"
                }
              }
            }
          }
        },
        "security": [
          {
            "Basic_Auth": []
          }
        ]
      }
    },
    "/phr/abha/create/phrAddress/search": {
      "post": {
        "tags": [
          "PHR"
        ],
        "summary": "Search for PHR Health Id number.",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "abhaNumber": {
                    "type": "string",
                    "example": "99-1199-1199-1199"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "success.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AddressResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "Basic_Auth": []
          }
        ]
      }
    },
    "/phr/abha/create/phrAddress/auth-init": {
      "post": {
        "tags": [
          "PHR"
        ],
        "summary": "Auth-initialize endpoint for PHR Address.",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AuthInitRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "success.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthInitResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "Basic_Auth": []
          }
        ]
      }
    },
    "/phr/abha/create/phrAddress/auth-confirm": {
      "post": {
        "tags": [
          "PHR"
        ],
        "summary": "Confirm Authentication",
        "description": "Confirms the authentication of a user by providing the necessary authentication code.\n",
        "parameters": [
          {
            "name": "PHR-AUTH-ID",
            "in": "header",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "authCode": {
                    "type": "string",
                    "example": "******"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "success.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthConfirmResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "Basic_Auth": []
          }
        ]
      }
    },
    "/phr/abha/create/phrAddress/confirm-create": {
      "post": {
        "tags": [
          "PHR"
        ],
        "summary": "Confirm-create endpoint for PHR Address.",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "abhaAddress": {
                    "type": "string",
                    "example": "abc***@sbx"
                  },
                  "password": {
                    "type": "string",
                    "example": "********"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string"
                    }
                  },
                  "example": {
                    "status": "success"
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "Basic_Auth": []
          }
        ]
      }
    },
    "/phr/patients/requests": {
      "get": {
        "summary": "Retrieve patient requests",
        "parameters": [
          {
            "name": "PHR-AUTH-ID",
            "in": "header",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "operationId": "getPatientRequests",
        "tags": [
          "PHR"
        ],
        "responses": {
          "200": {
            "description": "Successful retrieval of patient requests",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PatientRequests"
                }
              }
            }
          },
          "400": {
            "description": "Bad request"
          },
          "500": {
            "description": "Internal server error"
          }
        },
        "security": [
          {
            "Basic_Auth": []
          }
        ]
      }
    },
    "/phr/auth/identifier/v2/linkHealthId": {
      "get": {
        "tags": [
          "PHR"
        ],
        "summary": "Fetches health ID link status and details",
        "operationId": "getHealthIdLinkStatus",
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HealthIdLinkResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "Basic_Auth": []
          }
        ]
      },
      "post": {
        "tags": [
          "PHR"
        ],
        "summary": "Link health ID for a patient",
        "operationId": "linkHealthId",
        "requestBody": {
          "description": "Patient's health ID link data",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/LinkHealthIdRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/LinkHealthIdSuccessResponse"
                    },
                    {
                      "$ref": "#/components/schemas/LinkHealthIdErrorResponse"
                    }
                  ]
                }
              }
            }
          },
          "default": {
            "description": "Unexpected error"
          }
        },
        "security": [
          {
            "Basic_Auth": []
          }
        ]
      }
    },
    "/phr/patients/links": {
      "get": {
        "tags": [
          "PHR"
        ],
        "summary": "Get linked care contexts",
        "description": "Get all the linked care contexts from all HIPs for a patient.         This API is to be consumed by patients.\n",
        "parameters": [
          {
            "$ref": "#/components/parameters/phrAuthId"
          }
        ],
        "responses": {
          "200": {
            "description": "All linked care contexts of a patient.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LinkedCareContexts"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/LinkedCareContexts"
                }
              }
            }
          }
        },
        "security": [
          {
            "Basic_Auth": []
          }
        ]
      }
    },
    "/phr/abha/profile/details": {
      "get": {
        "tags": [
          "PHR"
        ],
        "summary": "Retrieve profile details",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "User's unique identifier.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Profile details retrieved successfully.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProfileDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "Basic_Auth": []
          }
        ]
      }
    },
    "/phr/patients/pin": {
      "post": {
        "tags": [
          "PHR"
        ],
        "summary": "Create consent transaction pin",
        "description": "Create a transaction pin to use it while granting consent.",
        "parameters": [
          {
            "$ref": "#/components/parameters/phrAuthId"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreatePinRequest"
              }
            }
          }
        },
        "responses": {
          "204": {
            "description": "PIN created successfully."
          }
        },
        "security": [
          {
            "Basic_Auth": []
          }
        ]
      }
    },
    "/phr/patients/verify-pin": {
      "post": {
        "tags": [
          "PHR"
        ],
        "summary": "Verify PIN",
        "description": "Verify the pin before granting the consent request.",
        "parameters": [
          {
            "$ref": "#/components/parameters/phrAuthId"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ValidatePinRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful verification of PIN.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IdentifierVerifyResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "Basic_Auth": []
          }
        ]
      }
    },
    "/phr/patients/change-pin": {
      "post": {
        "tags": [
          "PHR"
        ],
        "summary": "Change PIN",
        "description": "To change the transaction PIN,",
        "parameters": [
          {
            "$ref": "#/components/parameters/phrAuthId"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ChangePinRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "PIN updated successfully."
          },
          "400": {
            "description": "Bad request (Invalid PIN)",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ABDMErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "Basic_Auth": []
          }
        ]
      }
    },
    "/phr/patients/forgot-pin/generate-otp": {
      "post": {
        "tags": [
          "PHR"
        ],
        "summary": "Generate an OTP for the forgotten pin flow.",
        "parameters": [
          {
            "$ref": "#/components/parameters/phrAuthId"
          }
        ],
        "responses": {
          "201": {
            "description": "OTP generated successfully.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GenerateOtpResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "Basic_Auth": []
          }
        ]
      }
    },
    "/phr/patients/forgot-pin/validate-otp": {
      "post": {
        "tags": [
          "PHR"
        ],
        "summary": "Validate the OTP for the forgotten pin flow.",
        "parameters": [
          {
            "$ref": "#/components/parameters/phrAuthId"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/forgotVerifyOtpRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OTP validation successful."
          }
        },
        "security": [
          {
            "Basic_Auth": []
          }
        ]
      }
    },
    "/phr/patients/profile/share": {
      "post": {
        "tags": [
          "PHR"
        ],
        "summary": "Shares profile details",
        "description": "Share the health ID and user demographics.",
        "parameters": [
          {
            "$ref": "#/components/parameters/phrAuthId"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ShareProfileRequest1"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successfully shared patient details.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ShareProfileResponse1"
                }
              }
            }
          }
        },
        "security": [
          {
            "Basic_Auth": []
          }
        ]
      }
    },
    "/phr/locker-requests/approve": {
      "post": {
        "tags": [
          "PHR"
        ],
        "summary": "Approve locker requests",
        "description": "Approve locker subscriptions, authorise requests, and create a consent auto-approval policy.",
        "parameters": [
          {
            "$ref": "#/components/parameters/phrAuthId"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/LockerApprovalRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Locker requests approved successfully.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LockerRequestsApprovalResponse"
                }
              }
            }
          },
          "400": {
            "description": "**Causes:**\n  * Invalid locker Approval Request.\n",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "Basic_Auth": []
          }
        ]
      }
    },
    "/phr/states": {
      "get": {
        "tags": [
          "PHR"
        ],
        "summary": "List of States",
        "description": "Getting list of States.",
        "responses": {
          "200": {
            "description": "List of States.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StateRequestResponse"
                }
              }
            }
          },
          "400": {
            "description": "**Causes:**\n  * Invalid Request\n",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ABDMErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "Basic_Auth": []
          }
        ]
      }
    },
    "/phr/providers": {
      "get": {
        "tags": [
          "PHR"
        ],
        "summary": "List providers by given name.",
        "description": "Returns a list of providers 1. Matching with the given name passed as a query parameter 3. Restricts the matching for the given state code and district code if passed.\n",
        "operationId": "listProviders",
        "parameters": [
          {
            "$ref": "#/components/parameters/phrAuthId"
          },
          {
            "$ref": "#/components/parameters/providerName"
          },
          {
            "$ref": "#/components/parameters/stateCode"
          },
          {
            "$ref": "#/components/parameters/districtCode"
          }
        ],
        "responses": {
          "200": {
            "description": "List of health information providers.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProvidersRepresentation"
                }
              }
            }
          }
        },
        "security": [
          {
            "Basic_Auth": []
          }
        ]
      }
    },
    "/phr/v1/care-contexts/discover": {
      "post": {
        "tags": [
          "PHR"
        ],
        "summary": "Discover patient",
        "description": "Return only one patient record with (potentially masked) associated care contexts. 1. At least one of the verified identifiers matches. 2. Filter out records using unverified, first name, second name, gender, and DOB.\n   If there are more than one patient record found from step 1,\n",
        "operationId": "discoverPatient",
        "parameters": [
          {
            "$ref": "#/components/parameters/phrAuthId"
          }
        ],
        "requestBody": {
          "required": true,
          "description": "A patient discovery request.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PatientDiscoveryRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Found a patient.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PatientDiscoveryRepresentation"
                }
              }
            }
          },
          "401": {
            "description": "**Causes:**\n  * Unauthorized request\n",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ABDMErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "Basic_Auth": []
          }
        ]
      }
    },
    "/phr/abha/login/phrAddress/search": {
      "get": {
        "tags": [
          "PHR"
        ],
        "summary": "Search User by PHR Address",
        "description": "Retrieves the PHR address and available authentication methods for a user based on the provided PHR address.\n",
        "parameters": [
          {
            "$ref": "#/components/parameters/phrAuthId"
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully retrieved user details.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "Basic_Auth": []
          }
        ]
      }
    },
    "/phr/abha/login/phrAddress/auth-init": {
      "post": {
        "tags": [
          "PHR"
        ],
        "summary": "Initiate Authentication Process",
        "description": "Initiates an authentication process for a user based on their PHR address and the selected authentication mode.\n",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AuthInitRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successfully initiated authentication process.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthInitResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "Basic_Auth": []
          }
        ]
      }
    },
    "/phr/abha/login/phrAddress/auth-confirm": {
      "post": {
        "tags": [
          "PHR"
        ],
        "summary": "Confirm Authentication",
        "description": "Confirms the authentication of a user by providing the necessary authentication code.\n",
        "parameters": [
          {
            "name": "PHR-AUTH-ID",
            "in": "header",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "authCode": {
                    "type": "string",
                    "example": "******"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "success.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthConfirmResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "Basic_Auth": []
          }
        ]
      }
    },
    "/phr/abha/profile/health-card": {
      "get": {
        "tags": [
          "PHR"
        ],
        "summary": "Retrieve Health Card",
        "description": "Retrieves the health card for the user's profile, returning the image as a string along with its content type.\n",
        "parameters": [
          {
            "name": "PHR-AUTH-ID",
            "in": "header",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully retrieved health card.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HealthCardResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "Basic_Auth": []
          }
        ]
      }
    },
    "/phr/patientSubscription/check": {
      "get": {
        "tags": [
          "PHR"
        ],
        "summary": "Check Patient Subscription",
        "description": "It Checks the subscription status of a patient based on their health ID, indicating whether they have an active subscription.\n",
        "parameters": [
          {
            "$ref": "#/components/parameters/healthId"
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully checked patient subscription status.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PatientSubscriptionResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "Basic_Auth": []
          }
        ]
      }
    },
    "/phr/patients/reset-pin": {
      "post": {
        "tags": [
          "PHR"
        ],
        "summary": "Update pin with temporary token",
        "parameters": [
          {
            "name": "X-AUTH-TOKEN",
            "description": "The token was received after successful verification of the OTP.",
            "in": "header",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ChangePinRequest"
              }
            }
          }
        },
        "responses": {
          "204": {
            "description": "Pin updated successfully."
          }
        },
        "security": [
          {
            "Basic_Auth": []
          }
        ]
      }
    },
    "/provider": {
      "get": {
        "tags": [
          "Provider"
        ],
        "summary": "Give a list of the providers based on UUID.",
        "description": "This call is used to get the list of providers based on the UUID. provided.",
        "parameters": [
          {
            "name": "uuid",
            "in": "query",
            "schema": {
              "type": "string"
            },
            "example": "d075d480-3c34-4ad9-b777-0b03aaddfd2d"
          },
          {
            "name": "page",
            "in": "query",
            "schema": {
              "type": "integer"
            },
            "example": "1"
          },
          {
            "name": "start",
            "in": "query",
            "schema": {
              "type": "integer"
            },
            "example": "0"
          },
          {
            "name": "limit",
            "in": "query",
            "schema": {
              "type": "integer"
            },
            "example": "24"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                },
                "example": {
                  "results": [
                    {
                      "uuid": "994604c0-9cbb-4f8d-8b35-78f9924571bc",
                      "display": "Gourav Gourav",
                      "name": "Gourav Gourav",
                      "person": {
                        "uuid": "ce306d01-5054-42f3-b991-ee88b25f2e21",
                        "display": "Gourav Gourav",
                        "name": "Gourav Gourav"
                      }
                    }
                  ]
                }
              }
            }
          }
        }
      }
    },
    "/provider/chatAndSecurityGroups": {
      "post": {
        "tags": [
          "Provider"
        ],
        "summary": "Retrieve the provider's chat and security groups.",
        "description": "This endpoint retrieves the chat and security groups associated with a specific provider.\n",
        "operationId": "getProviderChatAndSecurityGroups",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/parameters/ProviderPersonUuidParam"
              },
              "examples": {
                "ProviderUuidRequestExample": {
                  "value": {
                    "uuid": "04f28cc7-27b3-4a7f-9857-b6c9a667cb69"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Provider's chat and security groups retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProviderChatAndSecurityGroupsResponse"
                },
                "examples": {
                  "ProviderChatAndSecurityGroupsResponseExample": {
                    "value": {
                      "Groups": [
                        {
                          "providerName": "kartik Patel",
                          "providerAttributes": [
                            {
                              "attributeType": "Email Verified",
                              "value": false
                            },
                            {
                              "attributeType": "Specialty",
                              "value": "medicine"
                            }
                          ],
                          "locationId": 78447,
                          "locationUuid": "aeae3167-ad0f-4e45-8a4e-7d89bf2f8d47",
                          "locationName": "b7c68f23-21aa-4890-9b25-ecdb66d33684",
                          "groupId": 88095,
                          "groupName": "raxa",
                          "groupUuid": "8348d3ff-b8f6-4773-808e-713584dff4c1",
                          "description": "RaxaSecurityGroup"
                        }
                      ]
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/providernetwork": {
      "get": {
        "tags": [
          "Person"
        ],
        "summary": "Get a call to retrieve the details of the person.",
        "parameters": [
          {
            "name": "personUuid",
            "in": "query",
            "schema": {
              "type": "string"
            },
            "example": "1ed95fc7-4aa3-4f84-aca6-5ef32371f4f5"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                },
                "example": {
                  "providerUuid": "d50f4df2-e5e1-4b42-9c39-6a1f3da60840",
                  "providerAttributes": [
                    {
                      "attributeType": "MCI Number",
                      "value": "333"
                    },
                    {
                      "attributeType": "PhoneNumberVerified",
                      "value": true
                    }
                  ],
                  "roles": [
                    "Provider"
                  ],
                  "personAttributes": [
                    {
                      "attributeType": "Location",
                      "value": "hello motto Raxa Group"
                    },
                    {
                      "attributeType": "SecurityGroup",
                      "value": "88751",
                      "name": "hello motto Raxa Group"
                    },
                    {
                      "attributeType": "Health Center",
                      "value": "79624"
                    },
                    {
                      "attributeType": "Primary Contact",
                      "value": "7777555333"
                    },
                    {
                      "attributeType": "Email",
                      "value": "hello.motto@raxa.com"
                    },
                    {
                      "attributeType": "Country",
                      "value": "India"
                    },
                    {
                      "attributeType": "Auth",
                      "value": "hE9ctyIHUpTrxFvRzqvkSGPFar+WSfOgH3z5xnyqhQfJSYCJspQX9V0drMFx5mhf"
                    }
                  ],
                  "display": "hello motto",
                  "gender": "M",
                  "age": 0
                }
              }
            }
          }
        },
        "security": [
          {
            "Basic_Auth": []
          }
        ]
      },
      "post": {
        "tags": [
          "Provider"
        ],
        "summary": "Add a provider to the person's network.",
        "description": "Add a provider to the network by creating a relationship between two people.",
        "operationId": "addProviderToNetwork",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ProviderNetworkRequest"
              },
              "example": {
                "fromPerson": "cd1916c4-13c4-4148-9a7f-2c4fe2ab451b",
                "toPerson": "b8ce1d2e-421a-4d3a-9b82-d07f329a5c88",
                "relationshipType": 47
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Provider added to network successfully",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "boolean",
                  "example": false
                }
              }
            }
          }
        },
        "security": [
          {
            "Basic_Auth": []
          }
        ]
      }
    },
    "/providernetwork/getThirdPersonProfile": {
      "get": {
        "tags": [
          "Person"
        ],
        "summary": "Get a Third-Party Profile",
        "description": "Retrieve the profile information of a third person in the provider network.",
        "operationId": "getThirdPersonProfile",
        "parameters": [
          {
            "name": "patientProviderUuid",
            "in": "query",
            "required": true,
            "description": "The UUID of the patient provider to retrieve the profile information for",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Profile information retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "providerUuid": {
                      "type": "string",
                      "description": "UUID of the provider."
                    },
                    "providerAttributes": {
                      "type": "array",
                      "description": "List of provider attributes.",
                      "items": {
                        "type": "object"
                      }
                    },
                    "personAttributes": {
                      "type": "array",
                      "description": "List of person attributes.",
                      "items": {
                        "type": "object",
                        "properties": {
                          "attributeType": {
                            "type": "string",
                            "description": "Type of the attribute."
                          },
                          "value": {
                            "type": "string",
                            "description": "Value of the attribute."
                          },
                          "name": {
                            "type": "string",
                            "description": "Name associated with the attribute (if applicable)."
                          }
                        }
                      }
                    },
                    "display": {
                      "type": "string",
                      "description": "Display name of the provider."
                    },
                    "gender": {
                      "type": "string",
                      "description": "Gender of the provider."
                    },
                    "age": {
                      "type": "integer",
                      "description": "Age of the provider."
                    },
                    "role": {
                      "type": "string",
                      "description": "Role of the provider in the network."
                    }
                  }
                },
                "examples": {
                  "ThirdPersonProfileExample": {
                    "value": {
                      "providerUuid": "47b7bc56-1654-401d-bd64-47c277e6630d",
                      "providerAttributes": [],
                      "personAttributes": [
                        {
                          "attributeType": "Location",
                          "value": "shiva dhabha's Raxa Group"
                        },
                        {
                          "attributeType": "SecurityGroup",
                          "value": "88719",
                          "name": "shiva dhabha's Raxa Group"
                        },
                        {
                          "attributeType": "Health Center",
                          "value": "79588"
                        },
                        {
                          "attributeType": "Primary Contact",
                          "value": "88595874"
                        },
                        {
                          "attributeType": "Auth",
                          "value": "czQtZ24gD7sLZF/1mbfmzXoixJmvxp0/5SJXXRsvtoipb0XGL9CB+lCuVMwteb5Y"
                        },
                        {
                          "attributeType": "isPatient",
                          "value": "true"
                        },
                        {
                          "attributeType": "bloodGroup",
                          "value": "A+"
                        }
                      ],
                      "display": "shiva dhabha",
                      "gender": "M",
                      "age": 23,
                      "role": "provider"
                    }
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "Basic_Auth": []
          }
        ]
      }
    },
    "/reports/generateReport": {
      "post": {
        "tags": [
          "Reports"
        ],
        "summary": "Report",
        "description": "Generate a report based on the provided report definition, output type, and other parameters.  The response includes a URL path to the generated report.\n",
        "operationId": "generateReport",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/GenerateReportRequest"
              },
              "example": {
                "reportDefinitionId": "SelfPayments",
                "reportOutputType": "pdf",
                "convertOutputToBase64": true,
                "provider_uuid": "931d5bb5-773f-4ffd-b0f7-4a2bb6a5488d"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Report generation success",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                },
                "example": "/path/to/generated/report.pdf"
              }
            }
          }
        },
        "security": [
          {
            "Basic_Auth": []
          }
        ]
      }
    },
    "/reports/getReportsList": {
      "post": {
        "tags": [
          "Reports"
        ],
        "summary": "Get a list of reports",
        "description": "Retrieve a list of available reports in the Raxa system.",
        "operationId": "getReportsList",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object"
              },
              "example": {}
            }
          }
        },
        "responses": {
          "200": {
            "description": "List of reports retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ReportsListResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "Basic_Auth": []
          }
        ]
      }
    },
    "/search/full": {
      "get": {
        "tags": [
          "Search"
        ],
        "summary": "Perform Full Search",
        "description": "Perform a comprehensive search across various categories, including persons, observations, drugs, procedures, and images.\n",
        "operationId": "performFullSearch",
        "parameters": [
          {
            "name": "personPage",
            "in": "query",
            "required": true,
            "description": "The page number for person search results.",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "obsPage",
            "in": "query",
            "required": true,
            "description": "The page number for observation search results.",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "drugPage",
            "in": "query",
            "required": true,
            "description": "The page number for drug search results.",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "procedurePage",
            "in": "query",
            "required": true,
            "description": "The page number for procedure search results.",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "imagePage",
            "in": "query",
            "required": true,
            "description": "The page number for image search results.",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "query",
            "in": "query",
            "required": true,
            "description": "The search query string.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "_dc",
            "in": "query",
            "required": false,
            "description": "A unique identifier for cache busting.",
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Search results fetched successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "country": {
                        "type": "string",
                        "nullable": true
                      },
                      "birthdate": {
                        "type": "string",
                        "format": "date-time",
                        "nullable": true
                      },
                      "gender": {
                        "type": "string",
                        "nullable": true
                      },
                      "concept_id": {
                        "type": "string",
                        "nullable": true
                      },
                      "obs_datetime": {
                        "type": "string",
                        "format": "date-time",
                        "nullable": true
                      },
                      "accessPath": {
                        "type": "string",
                        "nullable": true
                      },
                      "description": {
                        "type": "string",
                        "nullable": true
                      },
                      "type": {
                        "type": "string"
                      },
                      "title": {
                        "type": "string",
                        "nullable": true
                      },
                      "uuid": {
                        "type": "string",
                        "format": "uuid",
                        "nullable": true
                      },
                      "personInfo": {
                        "type": "string",
                        "nullable": true
                      },
                      "URL": {
                        "type": "string",
                        "format": "uri",
                        "nullable": true
                      },
                      "frequency": {
                        "type": "string",
                        "nullable": true
                      },
                      "encounter_id": {
                        "type": "string",
                        "nullable": true
                      },
                      "person_id": {
                        "type": "string",
                        "nullable": true
                      },
                      "quantity": {
                        "type": "string",
                        "nullable": true
                      },
                      "comments": {
                        "type": "string",
                        "nullable": true
                      },
                      "address1": {
                        "type": "string",
                        "nullable": true
                      },
                      "date_created": {
                        "type": "string",
                        "format": "date-time",
                        "nullable": true
                      },
                      "file_name": {
                        "type": "string",
                        "nullable": true
                      },
                      "count": {
                        "type": "string",
                        "nullable": true
                      },
                      "state_province": {
                        "type": "string",
                        "nullable": true
                      },
                      "value_numeric": {
                        "type": "string",
                        "nullable": true
                      },
                      "given_name": {
                        "type": "string",
                        "nullable": true
                      },
                      "value_text": {
                        "type": "string",
                        "nullable": true
                      },
                      "dose": {
                        "type": "string",
                        "nullable": true
                      },
                      "patient_id": {
                        "type": "string",
                        "nullable": true
                      },
                      "drug_inventory_id": {
                        "type": "string",
                        "nullable": true
                      },
                      "thumbNailURL": {
                        "type": "string",
                        "format": "uri",
                        "nullable": true
                      },
                      "city_village": {
                        "type": "string",
                        "nullable": true
                      },
                      "name": {
                        "type": "string",
                        "nullable": true
                      },
                      "family_name": {
                        "type": "string",
                        "nullable": true
                      },
                      "order_id": {
                        "type": "string",
                        "nullable": true
                      },
                      "obs_id": {
                        "type": "string",
                        "nullable": true
                      }
                    }
                  }
                },
                "example": [
                  {
                    "country": null,
                    "birthdate": null,
                    "gender": null,
                    "concept_id": null,
                    "obs_datetime": null,
                    "accessPath": null,
                    "description": null,
                    "type": "personCount",
                    "title": null,
                    "uuid": null,
                    "personInfo": null,
                    "URL": null,
                    "frequency": null,
                    "encounter_id": null,
                    "person_id": null,
                    "quantity": null
                  }
                ]
              }
            }
          }
        },
        "security": [
          {
            "Basic_Auth": []
          }
        ]
      }
    },
    "/publicSearch": {
      "get": {
        "tags": [
          "Search"
        ],
        "summary": "Perform a public search.",
        "description": "Perform a public search based on various parameters such as query string, public search page, public index, and more.  The response includes detailed search results.\n",
        "operationId": "performPublicSearch",
        "parameters": [
          {
            "name": "query",
            "in": "query",
            "required": true,
            "description": "The query string for the search",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "publicSearchPage",
            "in": "query",
            "required": false,
            "description": "The page number for paginated search results",
            "schema": {
              "type": "integer",
              "default": 0
            }
          },
          {
            "name": "publicIndex",
            "in": "query",
            "required": false,
            "description": "The public index to search against",
            "schema": {
              "type": "string",
              "default": "public-appointmentblock-demo2"
            }
          },
          {
            "name": "autoComplete",
            "in": "query",
            "required": false,
            "description": "Flag to enable or disable the autocomplete feature in the search",
            "schema": {
              "type": "boolean",
              "default": true
            }
          },
          {
            "name": "fuzzy",
            "in": "query",
            "required": false,
            "description": "Flag to enable or disable fuzzy search",
            "schema": {
              "type": "boolean",
              "default": true
            }
          },
          {
            "name": "rangeField",
            "in": "query",
            "required": false,
            "description": "The field to be used for range queries",
            "schema": {
              "type": "string",
              "default": "end_date_time"
            }
          },
          {
            "name": "uniqueField",
            "in": "query",
            "required": false,
            "description": "The field to be considered for uniqueness in the search results",
            "schema": {
              "type": "string",
              "default": "speciality_name"
            }
          },
          {
            "name": "fieldsToSearch",
            "in": "query",
            "required": false,
            "description": "The fields to be searched.",
            "schema": {
              "type": "string",
              "default": "*"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Public search results",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "autoCompleteResults": {
                      "$ref": "#/components/schemas/SearchResults"
                    },
                    "fuzzyResults": {
                      "$ref": "#/components/schemas/SearchResults"
                    }
                  }
                },
                "example": {
                  "autoCompleteResults": {
                    "_shards": {
                      "total": 5,
                      "failed": 0,
                      "successful": 5,
                      "skipped": 0
                    },
                    "hits": {
                      "hits": [],
                      "total": {
                        "value": 2,
                        "relation": "eq"
                      }
                    },
                    "took": 8,
                    "timed_out": false
                  },
                  "fuzzyResults": {
                    "_shards": {
                      "total": 5,
                      "failed": 0,
                      "successful": 5,
                      "skipped": 0
                    },
                    "hits": {
                      "hits": [],
                      "total": {
                        "value": 0,
                        "relation": "eq"
                      }
                    },
                    "took": 51,
                    "timed_out": false
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "Basic_Auth": []
          }
        ]
      }
    },
    "/extn/conceptSearch/procedure/{query}": {
      "get": {
        "tags": [
          "Search"
        ],
        "summary": "Search for Procedure Concepts",
        "description": "Search for medical procedure concepts based on a query string. The response includes a list of matching concepts with details.\n",
        "operationId": "searchProcedureConcepts",
        "parameters": [
          {
            "name": "query",
            "in": "path",
            "required": true,
            "description": "The query string is used to search for medical procedure concepts.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "List of matching medical procedure concepts",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "label": {
                        "type": "string",
                        "description": "The name or label of the medical procedure concept"
                      },
                      "datatypeId": {
                        "type": "integer",
                        "description": "The ID representing the data type of the concept"
                      },
                      "conceptId": {
                        "type": "integer",
                        "description": "The unique identifier for the medical procedure concept"
                      },
                      "uuid": {
                        "type": "string",
                        "format": "uuid",
                        "description": "The universally unique identifier for the medical procedure concept"
                      }
                    }
                  }
                },
                "example": [
                  {
                    "label": "Laparoscopic prostatectomy",
                    "datatypeId": 4,
                    "conceptId": 161203,
                    "uuid": "161203AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA"
                  },
                  {
                    "label": "Laparoscopic total nephrectomy",
                    "datatypeId": 4,
                    "conceptId": 161260,
                    "uuid": "161260AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA"
                  },
                  {
                    "label": "Exploratory laparotomy",
                    "datatypeId": 4,
                    "conceptId": 161789,
                    "uuid": "161789AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA"
                  }
                ]
              }
            }
          }
        },
        "security": [
          {
            "Basic_Auth": []
          }
        ]
      }
    },
    "/extn/conceptSearch/investigation": {
      "get": {
        "tags": [
          "Search"
        ],
        "summary": "Search for Investigation Concepts",
        "description": "Search for investigation concepts based on a query string value. The response includes a list of matching concepts with details.\n",
        "operationId": "searchInvestigationConcepts",
        "parameters": [
          {
            "name": "value",
            "in": "query",
            "required": true,
            "description": "The query string value is used to search for investigation concepts.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "List of matching investigation concepts",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "label": {
                        "type": "string",
                        "description": "The name or label of the investigation concept"
                      },
                      "conceptId": {
                        "type": "integer",
                        "description": "The unique identifier for the investigation concept"
                      },
                      "uuid": {
                        "type": "string",
                        "format": "uuid",
                        "description": "The universally unique identifier for the investigation concept"
                      },
                      "datatype": {
                        "type": "string",
                        "description": "The data type of the concept"
                      },
                      "datatypeId": {
                        "type": "integer",
                        "description": "The ID representing the data type of the concept"
                      },
                      "conceptClassName": {
                        "type": "string",
                        "description": "The class name of the concept"
                      },
                      "conceptClassId": {
                        "type": "integer",
                        "description": "The ID representing the class of the concept"
                      },
                      "hiAbsolute": {
                        "type": "number",
                        "description": "The high absolute value for the concept, if applicable"
                      },
                      "lowAbsolute": {
                        "type": "number",
                        "description": "The low absolute value for the concept, if applicable"
                      },
                      "units": {
                        "type": "string",
                        "description": "The units of measurement for the concept, if applicable"
                      }
                    }
                  }
                },
                "example": [
                  {
                    "label": "CBCs",
                    "conceptId": 33334040,
                    "uuid": "574bdd08-8a8c-4b42-bf2e-7e97ad14RAXA",
                    "datatype": "Text",
                    "datatypeId": 3,
                    "conceptClassName": "Test",
                    "conceptClassId": 1,
                    "hiAbsolute": null,
                    "lowAbsolute": null,
                    "units": null
                  }
                ]
              }
            }
          }
        },
        "security": [
          {
            "Basic_Auth": []
          }
        ]
      }
    },
    "/extn/conceptSearch/drug": {
      "get": {
        "tags": [
          "Search"
        ],
        "summary": "Search for Drug Concepts",
        "description": "Search for drug concepts based on a query string value. The response includes a list of matching drug concepts with details.\n",
        "operationId": "searchDrugConcepts",
        "parameters": [
          {
            "name": "value",
            "in": "query",
            "required": true,
            "description": "The query string value to search for drug concepts",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "A list of matching drug concepts",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "name": {
                        "type": "string",
                        "description": "The name of the drug."
                      },
                      "conceptId": {
                        "type": "integer",
                        "description": "The unique identifier for the drug concept"
                      },
                      "datatypeId": {
                        "type": "integer",
                        "description": "The ID represents the data type of the drug concept"
                      },
                      "genericName": {
                        "type": "string",
                        "description": "The generic name of the drug"
                      },
                      "doseStrength": {
                        "type": "string",
                        "description": "The dose strength of the drug"
                      },
                      "route": {
                        "type": "string",
                        "description": "The administration route of the drug, if applicable"
                      },
                      "packetInfo": {
                        "type": "string",
                        "description": "The packet of information about the drug"
                      },
                      "price": {
                        "type": "number",
                        "format": "float",
                        "description": "The price of the drug"
                      },
                      "uuid": {
                        "type": "string",
                        "format": "uuid",
                        "description": "The universally unique identifier for the drug"
                      },
                      "conceptUuid": {
                        "type": "string",
                        "format": "uuid",
                        "description": "The universally unique identifier for the drug concept"
                      },
                      "dosageForm": {
                        "type": "string",
                        "description": "The dosage form of the drug"
                      },
                      "units": {
                        "type": "string",
                        "description": "The units of measurement for the drug, if applicable"
                      },
                      "unitConceptId": {
                        "type": "integer",
                        "description": "The ID representing the unit concept of the drug, if applicable"
                      },
                      "fullName": {
                        "type": "string",
                        "description": "The full name of the drug, including strength and dosage form"
                      }
                    }
                  }
                },
                "example": [
                  {
                    "name": "CROCIN",
                    "conceptId": 1000138,
                    "datatypeId": 3,
                    "genericName": "Paracetamol",
                    "doseStrength": "125MG/5ML",
                    "route": null,
                    "packetInfo": "60ml",
                    "price": 23,
                    "uuid": "raxa0000000000000000000000000003007707",
                    "conceptUuid": "10000000000000000000000000000000000138",
                    "dosageForm": "Suspension",
                    "units": null,
                    "unitConceptId": null,
                    "fullName": "CROCIN 125MG/5ML Suspension\n(Paracetamol)"
                  }
                ]
              }
            }
          }
        },
        "security": [
          {
            "Basic_Auth": []
          }
        ]
      }
    },
    "/extn/conceptSearch/diagnosis": {
      "get": {
        "tags": [
          "Search"
        ],
        "summary": "Search for diagnostic concepts",
        "description": "Search for diagnosis concepts based on a query string value. The response includes a list of matching diagnosis concepts with details.\n",
        "operationId": "searchDiagnosisConcepts",
        "parameters": [
          {
            "name": "value",
            "in": "query",
            "required": true,
            "description": "The query string value is used to search for diagnosis concepts.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "List of matching diagnosis concepts",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "label": {
                        "type": "string",
                        "description": "The label of the diagnosis concept"
                      },
                      "conceptId": {
                        "type": "integer",
                        "description": "The unique identifier for the diagnosis concept"
                      },
                      "datatypeId": {
                        "type": "integer",
                        "description": "The ID representing the data type of the diagnosis concept"
                      },
                      "uuid": {
                        "type": "string",
                        "format": "uuid",
                        "description": "The universally unique identifier for the diagnosis concept"
                      }
                    }
                  }
                },
                "example": [
                  {
                    "label": "Childbed fever",
                    "conceptId": 130,
                    "datatypeId": 4,
                    "uuid": "130AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA"
                  },
                  {
                    "label": "Peurperal fever",
                    "conceptId": 130,
                    "datatypeId": 4,
                    "uuid": "130AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA"
                  }
                ]
              }
            }
          }
        },
        "security": [
          {
            "Basic_Auth": []
          }
        ]
      }
    },
    "/provider/securityGroups": {
      "post": {
        "tags": [
          "SecurityGroup"
        ],
        "summary": "Get Provider Security Groups",
        "description": "This endpoint retrieves security groups associated with providers. The request body is empty, as the endpoint does not require any specific parameters.\n",
        "operationId": "getProviderSecurityGroups",
        "requestBody": {
          "required": false,
          "content": {
            "application/json": {
              "schema": {
                "type": "object"
              },
              "examples": {
                "EmptyRequestBody": {
                  "value": {}
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Provider security groups retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProviderSecurityGroupsResponse"
                },
                "examples": {
                  "ProviderSecurityGroupsExample": {
                    "value": {
                      "Groups": [
                        {
                          "locationId": 79427,
                          "locationUuid": "37bcfecf-ac28-48d5-92c1-fc3a426fe352",
                          "locationName": "2433ed2c-d42b-46f1-b59f-b406322dc7b0",
                          "address": null,
                          "groupId": 88644,
                          "groupName": "health facility",
                          "groupUuid": "db5864e2-a70b-4db7-a50e-29827b4d8172",
                          "description": "test",
                          "accessPath": "[\"{\\\"id\\\":\\\"8016\\\",\\\"type\\\":\\\"Person\\\"}\",\"(<%adminSecurityGroupMember> Requestor)\"]"
                        }
                      ],
                      "SelfPatientGroups": [],
                      "SelfPatientGPs": []
                    }
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "Basic_Auth": []
          }
        ]
      }
    },
    "/securitygroup/grantAccess": {
      "post": {
        "tags": [
          "SecurityGroup"
        ],
        "summary": "Grant Access to a Security Group",
        "description": "This endpoint grants access to a specific security group within the Raxa system. It takes in the UUID of the resource, the group ID, and the relationship type.\n",
        "operationId": "grantAccess",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/GrantAccessRequest"
              },
              "examples": {
                "GrantAccessExample": {
                  "value": {
                    "uuid": "a15eaa1b-e23b-467a-b5a8-748c5f97a76e",
                    "groupId": "88909",
                    "relationshipType": 27
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Access granted successfully or failure message",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                },
                "examples": {
                  "SuccessResponse": {
                    "value": "success"
                  },
                  "FailureResponse": {
                    "value": "failure"
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "Basic_Auth": []
          }
        ]
      }
    },
    "/securitygroup/createSecurityGroup": {
      "post": {
        "tags": [
          "SecurityGroup"
        ],
        "summary": "Create a Security Group",
        "description": "This endpoint creates a new security group within the Raxa system. It requires details such as group name, description, and member information.\n",
        "operationId": "createSecurityGroup",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateSecurityGroupRequest"
              },
              "examples": {
                "CreateSecurityGroupExample": {
                  "value": {
                    "groupName": "{\"0\":{\"uuid\":\"971af416-1491-4a61-9b6c-b8ee1698eede\",\"display\":\"nick henry\"}}",
                    "groupDescription": "RaxaCPCGroup",
                    "members": [
                      {
                        "personUuid": "971af416-1491-4a61-9b6c-b8ee1698eede",
                        "relationshipType": 27
                      }
                    ]
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Security group created successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CreateSecurityGroupResponse"
                },
                "examples": {
                  "SuccessResponse": {
                    "value": {
                      "securityGroupName": "{\"0\":{\"uuid\":\"971af416-1491-4a61-9b6c-b8ee1698eede\",\"display\":\"nick henry\"}}",
                      "securityGroupId": "88910",
                      "securityGroupUuid": "661b9e26-a4a3-4c7c-96fa-1b314631348c",
                      "locationId": "79952",
                      "locationUuid": "709b5ec0-be0a-409a-94dc-412c595bed79",
                      "groupDescription": "RaxaCPCGroup",
                      "members": [
                        {
                          "personUuid": "971af416-1491-4a61-9b6c-b8ee1698eede",
                          "relationshipType": 27
                        }
                      ],
                      "status": "success"
                    }
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "Basic_Auth": []
          }
        ]
      }
    },
    "/securitygroup/joinGroupRequest": {
      "post": {
        "tags": [
          "SecurityGroup"
        ],
        "summary": "Send Join Group Request",
        "description": "Send a request to join a security group.",
        "operationId": "joinGroupRequest",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "groupId": {
                    "type": "string",
                    "description": "The ID of the security group to join"
                  },
                  "relationshipType": {
                    "type": "integer",
                    "description": "The type of relationship to establish with the security group"
                  }
                },
                "required": [
                  "groupId",
                  "relationshipType"
                ]
              },
              "examples": {
                "JoinGroupRequestExample": {
                  "value": {
                    "groupId": "88911",
                    "relationshipType": 32
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Request to join group processed",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string",
                  "description": "The response indicating the result of the join group request."
                },
                "examples": {
                  "JoinGroupFailure": {
                    "value": "failure"
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "Basic_Auth": []
          }
        ]
      }
    },
    "/securitygroup/leaveGroup": {
      "post": {
        "tags": [
          "SecurityGroup"
        ],
        "summary": "Leave Security Group",
        "description": "Request to leave a security group.",
        "operationId": "leaveSecurityGroup",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "groupId": {
                    "type": "integer",
                    "description": "The ID of the security group to leave"
                  },
                  "relationshipType": {
                    "type": "integer",
                    "description": "The type of relationship for leaving the group"
                  }
                }
              },
              "example": {
                "groupId": 0,
                "relationshipType": 14
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Group leaving response",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                },
                "examples": {
                  "SuccessResponse": {
                    "value": "success"
                  },
                  "FailureResponse": {
                    "value": "failure"
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "Basic_Auth": []
          }
        ]
      }
    },
    "/securitygroup/shareRecords": {
      "post": {
        "tags": [
          "SecurityGroup"
        ],
        "summary": "Share Records",
        "description": "Request to share records between a provider and a patient. This operation grants a specified provider access to the records of a specified patient.\n",
        "operationId": "shareRecords",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "providerUuid": {
                    "type": "string",
                    "format": "uuid",
                    "description": "The UUID of the provider to whom access is being granted"
                  },
                  "patientUuid": {
                    "type": "string",
                    "format": "uuid",
                    "description": "The UUID of the patient whose records are being shared"
                  }
                },
                "required": [
                  "providerUuid",
                  "patientUuid"
                ]
              },
              "example": {
                "providerUuid": "0998901c-785f-437a-91f4-b9d5d35a099b",
                "patientUuid": "9624a133-5cd2-4b16-b597-db0e9c67f86c"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Record sharing response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "result": {
                      "type": "string",
                      "description": "A message indicating the result of the record sharing operation."
                    }
                  }
                },
                "example": {
                  "result": "Added access for nick henry to Test April Test April"
                }
              }
            }
          }
        },
        "security": [
          {
            "Basic_Auth": []
          }
        ]
      }
    },
    "/securitygroup/getJoinGroupRequests": {
      "get": {
        "tags": [
          "Security Group"
        ],
        "summary": "Get a list of join group requests",
        "description": "This endpoint retrieves a list of join group requests in a security group.  The join group requests are made by users who wish to join a particular security group.\n",
        "operationId": "getJoinGroupRequests",
        "parameters": [
          {
            "name": "_dc",
            "in": "query",
            "description": "A timestamp parameter to prevent caching issues.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "A list of join group requests",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "results": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/JoinGroupRequest"
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "Basic_Auth": []
          }
        ]
      }
    },
    "/extn/chat/docnetallcomments": {
      "post": {
        "tags": [
          "Testimonial"
        ],
        "summary": "Retrieve all testimonial comments for a specific user.",
        "description": "This endpoint retrieves all the testimonial comments associated with a specific user. identified by their UUID. It is useful for fetching the history of testimonial comments for user interaction analysis.\n",
        "operationId": "getAllTestimonialComments",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/testimonialCommentsRequest"
              },
              "examples": {
                "FetchComments": {
                  "value": {
                    "toUuid": "04f28cc7-27b3-4a7f-9857-b6c9a667cb69"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "List of comments successfully retrieved",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/testimonialCommentsResponse"
                },
                "examples": {
                  "CommentsList": {
                    "value": [
                      {
                        "uuid": "556ccfea-7f58-7b4b-ed14-54b1892af54e",
                        "fromUuid": "489b4cb1-7f7f-4f2a-ae80-20bc15c87ce6",
                        "toUuid": "04f28cc7-27b3-4a7f-9857-b6c9a667cb69",
                        "name": "SAMAI SAMAI",
                        "data": "Dr. Kartik is a patient oriented Doctor",
                        "timestamp": "2015-04-01 10:02:35",
                        "displayFlag": 2
                      }
                    ]
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "Basic_Auth": []
          }
        ]
      }
    },
    "/extn/chat/docnetdeclinecomment": {
      "post": {
        "tags": [
          "Testimonial"
        ],
        "summary": "Decline a testimonial comment",
        "description": "This endpoint allows a user to decline a testimonial comment based on its unique identifier.\n",
        "operationId": "declineTestimonialComment",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DeclineTestimonialCommentRequest"
              },
              "examples": {
                "DeclineCommentExample": {
                  "value": {
                    "uuid": "8b69ffc0-b197-1d8b-385b-f8bef9e73ad7"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Comment successfully declined",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DeclineTestimonialCommentResponse"
                },
                "examples": {
                  "DeclineCommentResponseExample": {
                    "value": {
                      "fieldCount": 0,
                      "affectedRows": 1,
                      "insertId": 0,
                      "serverStatus": 2,
                      "warningCount": 0,
                      "message": "(Rows matched: 1  Changed: 0  Warnings: 0",
                      "protocol41": true,
                      "changedRows": 0
                    }
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "Basic_Auth": []
          }
        ]
      }
    },
    "/extn/chat/docnetcomment": {
      "post": {
        "tags": [
          "Testimonial"
        ],
        "summary": "Post a testimonial comment",
        "description": "This endpoint allows a user to post a comment to the chat system. The comment includes information about the sender, the recipient, and the content of the message.\n",
        "operationId": "postComment",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PostTestimonialCommentRequest"
              },
              "examples": {
                "PostCommentExample": {
                  "value": {
                    "uuid": "bea90963-f33d-44d3-90cb-56aa4dd01f17",
                    "toUuid": "971af416-1491-4a61-9b6c-b8ee1698eede",
                    "toName": "nick henry",
                    "fromUuid": "971af416-1491-4a61-9b6c-b8ee1698eede",
                    "fromName": "nick henry",
                    "data": "dr. henry is awesome"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Comment successfully posted",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PostTestimonialCommentResponse"
                },
                "examples": {
                  "PostCommentResponseExample": {
                    "value": [
                      {
                        "fieldCount": 0,
                        "affectedRows": 1,
                        "insertId": 0,
                        "serverStatus": 2,
                        "warningCount": 0,
                        "message": "",
                        "protocol41": true,
                        "changedRows": 0
                      }
                    ]
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "Basic_Auth": []
          }
        ]
      }
    },
    "/extn/chat/docnetacceptcomment": {
      "post": {
        "tags": [
          "Testimonial"
        ],
        "summary": "Accept a testimonial comment",
        "description": "This endpoint allows a user to accept a testimonial comment within the chat system based on its unique identifier. Accepting a testimonial comment may involve marking it as approved or moving it to a visible chat thread.\n",
        "operationId": "acceptComment",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AcceptTestimonialCommentRequest"
              },
              "examples": {
                "AcceptCommentExample": {
                  "value": {
                    "uuid": "bea90963-f33d-44d3-90cb-56aa4dd01f17"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Comment successfully accepted",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AcceptTestimonialCommentResponse"
                },
                "examples": {
                  "AcceptCommentResponseExample": {
                    "value": {
                      "fieldCount": 0,
                      "affectedRows": 1,
                      "insertId": 0,
                      "serverStatus": 2,
                      "warningCount": 0,
                      "message": "(Rows matched: 1  Changed: 0  Warnings: 0",
                      "protocol41": true,
                      "changedRows": 0
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/user/verify-otp": {
      "post": {
        "tags": [
          "User"
        ],
        "summary": "Verify user OTP",
        "description": "This endpoint verifies the user's OTP provided during the signup process. It ensures that the user has received the OTP and is able to provide it back correctly, helping in validating the user's contact information.\n",
        "operationId": "verifyUserOtp",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/signUpVerifyOtpRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OTP verification successful",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/signUpVerifyOtpResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "Basic_Auth": []
          }
        ]
      }
    },
    "/user/v5": {
      "post": {
        "tags": [
          "User"
        ],
        "summary": "Create a new user",
        "description": "This endpoint is used to create a new user in the Raxacore system. The user is required to provide personal details, contact information, and other necessary data for account creation.\n",
        "operationId": "createUser",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/NewUserRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "User successfully created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NewUserResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "Basic_Auth": []
          }
        ]
      }
    },
    "/user": {
      "get": {
        "tags": [
          "User"
        ],
        "summary": "Check the uniqueness of the user's phone number or email address.",
        "description": "This endpoint is used to check if a user's phone number or email address\nis already registered with Raxa.\n",
        "operationId": "getUser",
        "parameters": [
          {
            "$ref": "#/components/parameters/userIdentifier"
          },
          {
            "$ref": "#/components/parameters/userIdentifierType"
          }
        ],
        "responses": {
          "200": {
            "description": "User found or not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserResponse"
                },
                "examples": {
                  "UserFound": {
                    "value": {
                      "uniqueIdentifier": "false",
                      "message": "This mobile number is already registered with Raxa. Please log in"
                    }
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "Basic_Auth": []
          }
        ]
      }
    },
    "/user/generate-otp/": {
      "get": {
        "tags": [
          "User"
        ],
        "summary": "Generate user authentication OTP.",
        "description": "This endpoint generates an OTP for user authentication based on the provided requester information. The OTP is sent to the requester, and a requestId is returned for future verification purposes.\n",
        "operationId": "generateUserAuthenticationOTP",
        "parameters": [
          {
            "$ref": "#/components/parameters/RequesterType"
          },
          {
            "$ref": "#/components/parameters/Requester"
          },
          {
            "$ref": "#/components/parameters/Language"
          },
          {
            "$ref": "#/components/parameters/Country"
          }
        ],
        "responses": {
          "200": {
            "description": "The OTP generated and sent successfully.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/userAuthenticationOTPResponse"
                },
                "examples": {
                  "OTPGenerated": {
                    "value": {
                      "requestId": "b35acb18-5b8c-4386-9c0a-94fa51f102ef",
                      "messageId": "{MessageId: e4dbe839-dfc4-5726-b115-b58d426d5b02}",
                      "language": "en"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/visit/visitList": {
      "post": {
        "summary": "Retrieve visit details for a patient.",
        "operationId": "getVisitDetails",
        "tags": [
          "Visit"
        ],
        "parameters": [],
        "requestBody": {
          "description": "Details required to fetch the patient's visit details",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/VisitRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successfully retrieved the visit details",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/VisitResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "Basic_Auth": []
          }
        ]
      }
    },
    "/visit/start": {
      "post": {
        "summary": "Start a visit for a patient",
        "operationId": "startVisit",
        "tags": [
          "Visit"
        ],
        "requestBody": {
          "description": "Details are required to start a visit.",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/StartVisitRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successfully started the visit",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StartVisitResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "Basic_Auth": []
          }
        ]
      }
    },
    "/visit/end": {
      "post": {
        "summary": "End a patient's visit",
        "operationId": "endPatientVisit",
        "tags": [
          "Visit"
        ],
        "requestBody": {
          "description": "The UUID of the visit to be ended",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EndVisitRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successfully ended the visit"
          },
          "400": {
            "description": "Bad request. The UUID might be missing or invalid."
          },
          "500": {
            "description": "Internal server error. An issue occurred while trying to end the visit."
          }
        },
        "security": [
          {
            "Basic_Auth": []
          }
        ]
      }
    },
    "/visit/isAdmitted": {
      "get": {
        "summary": "Check if a patient is admitted.",
        "operationId": "isPatientadmitted",
        "tags": [
          "Visit"
        ],
        "parameters": [
          {
            "name": "visit",
            "in": "query",
            "description": "UUID of the visit",
            "required": true,
            "schema": {
              "type": "string",
              "example": "dd154069-3b01-4b15-a41e-ff47cd9c0bfb"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully checked the admission status.",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string",
                  "enum": [
                    "true",
                    "false",
                    "Error : Visit Already Ended."
                  ]
                }
              }
            }
          },
          "400": {
            "description": "Bad request. The provided UUID might be missing or invalid."
          },
          "500": {
            "description": "Internal server error. An issue occurred while checking the admission status."
          }
        },
        "security": [
          {
            "Basic_Auth": []
          }
        ]
      }
    },
    "/visit/getActiveVisits": {
      "get": {
        "summary": "Retrieve active visits by patient UUID.",
        "operationId": "getActiveVisitsByPatient",
        "tags": [
          "Visit"
        ],
        "parameters": [
          {
            "name": "patient",
            "in": "query",
            "description": "UUID of the patient.",
            "required": true,
            "schema": {
              "type": "string",
              "example": "dd154069-3b01-4b15-a41e-ff47cd9c0bfb"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully retrieved active visits",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "result": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/Visit"
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request. The provided UUID might be missing or invalid."
          },
          "500": {
            "description": "Internal server error. An issue occurred while retrieving the visits"
          }
        },
        "security": [
          {
            "Basic_Auth": []
          }
        ]
      }
    },
    "/visit/encounter": {
      "get": {
        "summary": "Retrieve visit encounter details.",
        "operationId": "getVisitEncounter",
        "tags": [
          "Visit"
        ],
        "parameters": [
          {
            "name": "patient",
            "in": "query",
            "description": "UUID of the patient",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "visitUuid",
            "in": "query",
            "description": "UUID of the visit",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful retrieval of visit encounter details",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "results": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/VisitEncounter"
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request"
          },
          "500": {
            "description": "Internal server error"
          }
        },
        "security": [
          {
            "Basic_Auth": []
          }
        ]
      }
    }
  },
  "components": {
    "securitySchemes": {
      "Basic_Auth": {
        "type": "http",
        "scheme": "basic"
      }
    },
    "parameters": {
      "searchByRegistrationNo": {
        "in": "query",
        "name": "q",
        "required": false,
        "schema": {
          "title": "Patient search based on query",
          "description": "Patient search based on query.\n",
          "type": "string"
        }
      },
      "searchByPhoneNumber": {
        "required": false,
        "in": "query",
        "name": "p",
        "schema": {
          "title": "Patient search based on query",
          "description": "Patient search based on query.\n",
          "type": "string",
          "example": "query- Phone number(eg. 99********)"
        }
      },
      "FromObjectClassParam": {
        "in": "query",
        "name": "fromObjectClass",
        "required": true,
        "description": "The class of the source object",
        "schema": {
          "type": "string"
        }
      },
      "ToObjectClassParam": {
        "in": "query",
        "name": "toObjectClass",
        "required": true,
        "description": "The class of the target object",
        "schema": {
          "type": "string"
        }
      },
      "FromObjectIdParam": {
        "in": "query",
        "name": "fromObjectId",
        "required": true,
        "description": "ID of the source object",
        "schema": {
          "type": "integer"
        }
      },
      "ToObjectIdParam": {
        "in": "query",
        "name": "toObjectId",
        "required": true,
        "description": "ID of the target object",
        "schema": {
          "type": "integer"
        }
      },
      "RelationshipTypeParam": {
        "in": "query",
        "name": "relationshipType",
        "required": true,
        "description": "Type of relationship to check",
        "schema": {
          "type": "integer"
        }
      },
      "MessageUuidParam": {
        "in": "query",
        "name": "messageUuid",
        "required": true,
        "description": "UUID of the message.",
        "schema": {
          "type": "string"
        }
      },
      "PersonUuidParam": {
        "in": "query",
        "name": "personUuid",
        "required": true,
        "description": "UUID of the person.",
        "schema": {
          "type": "string"
        }
      },
      "ProviderPersonUuidParam": {
        "in": "query",
        "name": "providerPersonUuid",
        "required": true,
        "description": "UUID of the provider person.",
        "schema": {
          "type": "string"
        }
      },
      "ReqId": {
        "name": "reqId",
        "in": "query",
        "required": true,
        "description": "The unique identifier of the request.",
        "schema": {
          "type": "string",
          "format": "uuid"
        }
      },
      "GroupIdParam": {
        "in": "query",
        "name": "groupId",
        "required": true,
        "description": "ID of the group.",
        "schema": {
          "type": "integer"
        }
      },
      "smartPatient": {
        "in": "query",
        "name": "smartPatient",
        "required": true,
        "description": "UUID of the patient",
        "schema": {
          "type": "string",
          "format": "uuid"
        }
      },
      "encounterCount": {
        "in": "query",
        "name": "encounterCount",
        "required": true,
        "description": "Number of encounters to retrieve",
        "schema": {
          "type": "integer"
        }
      },
      "phrAuthId": {
        "name": "PHR-AUTH-ID",
        "in": "header",
        "required": true,
        "schema": {
          "type": "string"
        }
      },
      "healthId": {
        "name": "healthId",
        "in": "query",
        "required": true,
        "description": "The health ID of the patient.",
        "schema": {
          "type": "string"
        }
      },
      "userIdentifier": {
        "name": "identifier",
        "in": "query",
        "required": true,
        "description": "The phone number or email address of the user.",
        "schema": {
          "type": "string"
        }
      },
      "userIdentifierType": {
        "name": "type",
        "in": "query",
        "required": true,
        "description": "The type of identifier provided, either 'phone' or 'email'.",
        "schema": {
          "type": "string",
          "enum": [
            "phone",
            "email"
          ]
        }
      },
      "RequesterType": {
        "name": "requesterType",
        "in": "query",
        "required": true,
        "description": "The type of requester, e.g., 'phone' or 'email'.",
        "schema": {
          "type": "string"
        }
      },
      "Requester": {
        "name": "requester",
        "in": "query",
        "required": true,
        "description": "The contact information of the requester, either a phone number or email address.",
        "schema": {
          "type": "string"
        }
      },
      "Language": {
        "name": "language",
        "in": "query",
        "required": true,
        "description": "The language in which the OTP message should be sent.",
        "schema": {
          "type": "string"
        }
      },
      "Country": {
        "name": "country",
        "in": "query",
        "required": true,
        "description": "The country of the requester.",
        "schema": {
          "type": "string"
        }
      },
      "providerName": {
        "name": "name",
        "in": "query",
        "schema": {
          "type": "string",
          "example": "max"
        },
        "required": true
      },
      "stateCode": {
        "name": "stateCode",
        "in": "query",
        "schema": {
          "type": "string",
          "example": 35
        },
        "required": false
      },
      "districtCode": {
        "name": "districtCode",
        "in": "query",
        "schema": {
          "type": "string",
          "example": 603
        },
        "required": false
      }
    },
    "responses": {
      "getPatientBySearch": {
        "description": "Get patient that current logged In user has access.",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/getPatientBySearchObject"
            }
          }
        }
      }
    },
    "schemas": {
      "AmazonUserRequest": {
        "type": "object",
        "properties": {
          "userId": {
            "type": "string",
            "description": "Patient UUID"
          },
          "amzId": {
            "type": "string",
            "description": "Amazon user ID"
          }
        }
      },
      "AmazonUserResponse": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Amazon User ID in the system"
          },
          "ory_id": {
            "type": "string",
            "description": "Patient UUID"
          },
          "amz_id": {
            "type": "string",
            "description": "Amazon user ID"
          }
        }
      },
      "DelinkRequest": {
        "type": "object",
        "properties": {
          "patientUuid": {
            "type": "string",
            "description": "Patient UUID to delink from Amazon user"
          }
        }
      },
      "DelinkResponse": {
        "type": "object",
        "properties": {
          "success": {
            "type": "boolean",
            "description": "Indicates if the delink operation was successful"
          }
        }
      },
      "AmazonPrescriptionResponse": {
        "type": "object",
        "properties": {
          "consultation_id": {
            "type": "string"
          },
          "encounter_id": {
            "type": "string"
          },
          "status": {
            "type": "string"
          },
          "time": {
            "type": "string"
          }
        }
      },
      "AmazonPrescriptionRequest": {
        "type": "object",
        "properties": {
          "amzId": {
            "type": "string"
          },
          "encounterUuid": {
            "type": "string"
          },
          "patientUuid": {
            "type": "string"
          },
          "encounterType": {
            "type": "string",
            "enum": [
              "digital",
              "upload"
            ]
          }
        }
      },
      "AmazonPrescriptionCreationResponse": {
        "type": "object",
        "properties": {
          "success": {
            "type": "boolean"
          },
          "consultation_id": {
            "type": "string"
          },
          "time": {
            "type": "string"
          },
          "encounter_id": {
            "type": "string"
          }
        }
      },
      "VoidAccessRequest": {
        "type": "object",
        "properties": {
          "fromItem": {
            "$ref": "#/components/schemas/Item"
          },
          "toItem": {
            "$ref": "#/components/schemas/Item"
          },
          "relationshipType": {
            "type": "integer",
            "format": "int32",
            "description": "Type of the relationship"
          }
        }
      },
      "VoidAccessResponse": {
        "type": "boolean",
        "description": "Result of the void access relationship operation."
      },
      "LikeItemRequest": {
        "type": "object",
        "properties": {
          "fromItem": {
            "$ref": "#/components/schemas/Item"
          },
          "toItem": {
            "$ref": "#/components/schemas/Item"
          }
        }
      },
      "Item": {
        "type": "object",
        "properties": {
          "classType": {
            "type": "string",
            "description": "The type or class of the item."
          },
          "genericObjectPrimaryId": {
            "type": "string",
            "description": "The primary ID for the item."
          }
        }
      },
      "DeleteFeedRequest": {
        "type": "object",
        "properties": {
          "feedType": {
            "type": "string",
            "enum": [
              "socialCPCPost",
              "socialSharePost"
            ],
            "description": "The type of feed post."
          },
          "feedUuid": {
            "type": "string",
            "description": "UUID of the feed post to delete."
          },
          "postDeleteReason": {
            "type": "string",
            "description": "Reason for deleting the feed post."
          }
        }
      },
      "DeleteFeedResponse": {
        "type": "boolean",
        "description": "Result of the delete feed post operation."
      },
      "CommentRequest": {
        "type": "object",
        "properties": {
          "commentBody": {
            "type": "string",
            "description": "The body of the comment."
          },
          "toItem": {
            "type": "object",
            "properties": {
              "classType": {
                "type": "string"
              },
              "genericObjectPrimaryId": {
                "type": "integer"
              }
            }
          },
          "hasChildComment": {
            "type": "boolean",
            "default": false
          },
          "raxaPedia": {
            "type": "boolean",
            "default": false
          }
        },
        "required": [
          "commentBody",
          "toItem"
        ]
      },
      "CommentResponse": {
        "type": "object",
        "properties": {
          "message": {
            "type": "object",
            "additionalProperties": true
          },
          "error": {
            "type": "string",
            "description": "Error message if an error occurs."
          },
          "RaxaPediaLlmResponse": {
            "type": "string",
            "description": "Response from the RaxaPedia Language Model"
          }
        }
      },
      "SocialPost": {
        "type": "object",
        "properties": {
          "description": {
            "type": "string",
            "description": "Description of the social post."
          },
          "imageUuid": {
            "type": "string",
            "description": "UUID of the image for the social post."
          },
          "videoUuid": {
            "type": "string",
            "description": "UUID of the video associated with the social post."
          }
        },
        "required": [
          "description"
        ]
      },
      "SocialPostResponse": {
        "type": "object",
        "properties": {
          "linkUuid": {
            "type": "string",
            "description": "UUID link for the post."
          },
          "uuid": {
            "type": "string",
            "description": "UUID for the post."
          },
          "personId": {
            "type": "integer",
            "description": "ID of the person posting."
          },
          "senderDisplayName": {
            "type": "string",
            "description": "Display name of the sender."
          },
          "senderUuid": {
            "type": "string",
            "description": "UUID of the sender."
          },
          "feedName": {
            "type": "string",
            "description": "Name of the feed."
          },
          "raxaSubFeedList": {
            "type": "string",
            "description": "List of sub feeds related to the post."
          }
        },
        "required": [
          "linkUuid",
          "uuid",
          "personId",
          "senderDisplayName",
          "senderUuid",
          "feedName",
          "raxaSubFeedLis"
        ]
      },
      "CpcPostRequest": {
        "type": "object",
        "properties": {
          "description": {
            "type": "string",
            "description": "Description of the social post."
          },
          "imageUuid": {
            "type": "string",
            "description": "UUID of the image for the social post."
          },
          "patientPersonUuid": {
            "type": "string",
            "description": "UUID of the patient associated with the social post."
          },
          "securityGroupUuid": {
            "type": "string",
            "description": "UUID of the associated security group."
          }
        },
        "required": [
          "description",
          "imageUuid",
          "patientPersonUuid",
          "securityGroupUuid"
        ]
      },
      "CpcPostResponse": {
        "type": "object",
        "properties": {
          "linkUuid": {
            "type": "string"
          },
          "uuid": {
            "type": "string"
          },
          "personId": {
            "type": "integer"
          },
          "senderDisplayName": {
            "type": "string"
          },
          "senderUuid": {
            "type": "string"
          },
          "feedName": {
            "type": "string"
          },
          "raxaSubFeedList": {
            "type": "string",
            "description": "JSON string representing a list of Raxa sub-feeds associated with the post."
          }
        }
      },
      "SubscribeRequest": {
        "type": "object",
        "properties": {
          "securityGroupId": {
            "type": "string",
            "description": "Unique identifier for the security group"
          },
          "cdsServiceId": {
            "type": "string",
            "description": "Identifier for the Clinical Decision Support service to subscribe to"
          }
        },
        "required": [
          "securityGroupId",
          "cdsServiceId"
        ]
      },
      "SubscribedCdsServicesResponse": {
        "type": "object",
        "properties": {
          "services": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CdsService"
            }
          }
        }
      },
      "CdsService": {
        "type": "object",
        "properties": {
          "serviceType": {
            "type": "string",
            "description": "Type of the CDS service"
          },
          "noOfRules": {
            "type": "integer",
            "description": "Number of rules in the CDS service"
          },
          "description": {
            "type": "string",
            "description": "Description of the CDS service"
          },
          "uuid": {
            "type": "string",
            "description": "Unique identifier for the CDS service"
          },
          "raxaCdsServiceId": {
            "type": "integer",
            "description": "Raxa specific identifier for the CDS service"
          },
          "hook": {
            "type": "string",
            "description": "The hook identifier for the CDS service"
          },
          "dateCreated": {
            "type": "string",
            "description": "Date and time when the CDS service was created"
          },
          "name": {
            "type": "string",
            "description": "Name of the CDS service"
          },
          "voided": {
            "type": "boolean",
            "description": "Indicates whether the CDS service is voided or not"
          },
          "id": {
            "type": "string",
            "description": "Unique identifier for the CDS service, same as the hook"
          },
          "serviceId": {
            "type": "string",
            "description": "Identifier for the CDS service, same as the hook"
          }
        }
      },
      "LiveCdsServicesResponse": {
        "type": "object",
        "properties": {
          "services": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CdsService"
            }
          }
        }
      },
      "ErrorResponse": {
        "type": "object",
        "properties": {
          "error": {
            "type": "string",
            "description": "A descriptive error message."
          }
        }
      },
      "AccessVerificationResponse": {
        "type": "boolean",
        "description": "Indicates if access relationship exists between the two objects."
      },
      "SecurityGroupIdResponse": {
        "type": "object",
        "description": "Security group ID for the specified message.",
        "properties": {
          "classType": {
            "type": "string",
            "description": "Name of the class type, e.g., RaxaMessage."
          },
          "genericObjectPrimaryId": {
            "type": "integer",
            "description": "Primary ID of the object."
          }
        },
        "required": [
          "classType",
          "genericObjectPrimaryId"
        ]
      },
      "AccessCheckResponse": {
        "type": "object",
        "description": "Response to check if the user can access a message.",
        "properties": {
          "canJoin": {
            "type": "boolean",
            "description": "Indicates if the user can join the message."
          },
          "commentAccess": {
            "type": "boolean",
            "description": "Indicates if the user has access to comment."
          },
          "isRequested": {
            "type": "boolean",
            "description": "Indicates if the user has requested access."
          }
        },
        "required": [
          "canJoin",
          "commentAccess",
          "isRequested"
        ]
      },
      "PersonAccessCheckResponse": {
        "type": "object",
        "description": "Response to check if the person has access to a specific group.",
        "properties": {
          "recordsAccess": {
            "type": "boolean",
            "description": "Indicates if the person has access to the records."
          },
          "recordsRequested": {
            "type": "boolean",
            "description": "Indicates if the person has requested access to the records."
          }
        },
        "required": [
          "recordsAccess",
          "recordsRequested"
        ]
      },
      "JoinRequestsResponse": {
        "type": "object",
        "description": "List of join requests for a specified group.",
        "properties": {
          "results": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ProviderDetail"
            }
          }
        },
        "required": [
          "results"
        ]
      },
      "ProviderDetail": {
        "type": "object",
        "description": "Detailed provider information.",
        "properties": {
          "id": {
            "type": "integer"
          },
          "name": {
            "type": "string"
          }
        }
      },
      "Appointment": {
        "type": "object",
        "properties": {
          "reason": {
            "type": "string"
          },
          "appointmentType": {
            "$ref": "#/components/schemas/AppointmentType"
          },
          "timeSlot": {
            "$ref": "#/components/schemas/TimeSlot"
          },
          "patient": {
            "$ref": "#/components/schemas/Patient"
          },
          "links": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Link"
            }
          },
          "status": {
            "$ref": "#/components/schemas/Status"
          },
          "display": {
            "type": "string"
          },
          "resourceVersion": {
            "type": "string"
          },
          "voided": {
            "type": "boolean"
          },
          "visit": {
            "type": "string"
          },
          "cancelReason": {
            "type": "string"
          },
          "uuid": {
            "type": "string"
          }
        }
      },
      "AppointmentType": {
        "type": "object",
        "properties": {
          "display": {
            "type": "string"
          },
          "links": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Links"
            }
          },
          "uuid": {
            "type": "string"
          }
        }
      },
      "Links": {
        "type": "array",
        "items": {
          "$ref": "#/components/schemas/Link"
        }
      },
      "Status": {
        "type": "object",
        "properties": {
          "code": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "type": {
            "type": "string"
          }
        }
      },
      "TimeSlot": {
        "type": "object",
        "properties": {
          "countOfAppointments": {
            "type": "number"
          },
          "endDate": {
            "type": "string",
            "format": "date-time"
          },
          "display": {
            "type": "string"
          },
          "resourceVersion": {
            "type": "string"
          },
          "unallocatedMinutes": {
            "type": "number"
          },
          "voided": {
            "type": "boolean"
          },
          "links": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Link"
            }
          },
          "appointmentBlock": {
            "$ref": "#/components/schemas/AppointmentBlock"
          },
          "uuid": {
            "type": "string"
          },
          "startDate": {
            "type": "string",
            "format": "date-time"
          }
        }
      },
      "Link": {
        "type": "object",
        "properties": {
          "rel": {
            "type": "string"
          },
          "uri": {
            "type": "string"
          }
        }
      },
      "AppointmentBlock": {
        "type": "object",
        "properties": {
          "types": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Type"
            }
          },
          "endDate": {
            "type": "string",
            "format": "date-time"
          },
          "provider": {
            "$ref": "#/components/schemas/Provider"
          },
          "display": {
            "type": "string"
          },
          "resourceVersion": {
            "type": "string"
          },
          "location": {
            "$ref": "#/components/schemas/LocationAppointment"
          },
          "voided": {
            "type": "boolean"
          },
          "links": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Link"
            }
          },
          "uuid": {
            "type": "string"
          },
          "startDate": {
            "type": "string",
            "format": "date-time"
          }
        }
      },
      "Identifier": {
        "type": "object",
        "properties": {
          "display": {
            "type": "string"
          },
          "links": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Link"
            }
          },
          "uuid": {
            "type": "string",
            "format": "uuid"
          }
        }
      },
      "AttributePerson": {
        "type": "object",
        "properties": {
          "display": {
            "type": "string"
          },
          "links": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Link"
            }
          },
          "uuid": {
            "type": "string",
            "format": "uuid"
          }
        }
      },
      "PatientPerson": {
        "type": "object",
        "properties": {
          "birthdate": {
            "type": "string",
            "format": "date-time"
          },
          "gender": {
            "type": "string",
            "enum": [
              "M",
              "F",
              "O"
            ]
          },
          "display": {
            "type": "string"
          },
          "resourceVersion": {
            "type": "string"
          },
          "dead": {
            "type": "boolean"
          },
          "uuid": {
            "type": "string",
            "format": "uuid"
          },
          "preferredAddress": {
            "type": "string",
            "nullable": true
          },
          "birthdateEstimated": {
            "type": "boolean"
          },
          "deathdateEstimated": {
            "type": "boolean"
          },
          "deathDate": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "attributes": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/AttributePerson"
            }
          },
          "voided": {
            "type": "boolean"
          },
          "birthtime": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "links": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Link"
            }
          },
          "preferredName": {
            "$ref": "#/components/schemas/Identifier"
          },
          "causeOfDeath": {
            "type": "string",
            "nullable": true
          },
          "age": {
            "type": "number"
          }
        }
      },
      "Patient": {
        "type": "object",
        "required": [
          "identifiers",
          "person"
        ],
        "properties": {
          "identifiers": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Identifier"
            }
          },
          "person": {
            "$ref": "#/components/schemas/PatientPerson"
          },
          "display": {
            "type": "string"
          },
          "resourceVersion": {
            "type": "string"
          },
          "voided": {
            "type": "boolean"
          },
          "links": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Link"
            }
          },
          "uuid": {
            "type": "string",
            "format": "uuid"
          }
        }
      },
      "Type": {
        "type": "object",
        "properties": {
          "display": {
            "type": "string"
          },
          "links": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Link"
            }
          },
          "uuid": {
            "type": "string"
          }
        }
      },
      "Provider": {
        "type": "object",
        "properties": {
          "identifier": {
            "type": "string",
            "nullable": true
          },
          "person": {
            "$ref": "#/components/schemas/PersonAppointment"
          },
          "display": {
            "type": "string"
          },
          "resourceVersion": {
            "type": "string"
          },
          "attributes": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/AttributeAppointment"
            }
          },
          "retired": {
            "type": "boolean"
          },
          "links": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Link"
            }
          },
          "uuid": {
            "type": "string"
          }
        }
      },
      "PersonAppointment": {
        "type": "object",
        "properties": {
          "display": {
            "type": "string"
          },
          "links": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Link"
            }
          },
          "uuid": {
            "type": "string"
          }
        }
      },
      "AttributeAppointment": {
        "type": "object",
        "properties": {
          "display": {
            "type": "string"
          },
          "links": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Link"
            }
          },
          "uuid": {
            "type": "string"
          }
        }
      },
      "LocationAppointment": {
        "type": "object",
        "properties": {
          "display": {
            "type": "string"
          },
          "links": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Link"
            }
          },
          "uuid": {
            "type": "string"
          }
        }
      },
      "LikeItemResponse": {
        "type": "boolean",
        "description": "Result of the like item operation"
      },
      "getPatientBySearchObject": {
        "type": "object",
        "properties": {
          "results": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/getPatientBySearchSimplifiedObj"
            },
            "description": "results is the array of the patient object with basic details.",
            "maxItems": 100
          }
        }
      },
      "getPatientBySearchSimplifiedObj": {
        "type": "object",
        "properties": {
          "uuid": {
            "$ref": "#/components/schemas/Uuid"
          },
          "display": {
            "type": "string",
            "description": "patiet name (given name and family name)"
          },
          "id": {
            "type": "string",
            "description": "Patient id"
          },
          "age": {
            "type": "string",
            "description": "patient's age"
          },
          "gender": {
            "type": "string",
            "description": "genfer of the patient"
          },
          "phoneNumber": {
            "type": "string",
            "description": "registration no. incase query param is \"q\" and phone number in case query param is \"p\"."
          }
        }
      },
      "PatientListUpdateRequest": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "Name of the patient list"
          },
          "description": {
            "type": "string",
            "description": "Description of the patient list"
          },
          "searchQuery": {
            "type": "string",
            "description": "Optional search query for the patient list"
          }
        }
      },
      "UpdatePatientResponse": {
        "type": "object",
        "properties": {
          "oldPatientsToBeRemoved": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "List of patient IDs to be removed"
          },
          "newPatientsToBeAdded": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PatientDetail"
            },
            "description": "List of new patient details to be added"
          }
        }
      },
      "UpdateInCarePatientRequest": {
        "type": "object",
        "properties": {
          "oldPatientsList": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "List of old patient IDs"
          },
          "groupIds": {
            "type": "array",
            "items": {
              "type": "integer"
            },
            "description": "List of group IDs"
          }
        }
      },
      "UpdateInCarePatientResponse": {
        "type": "object",
        "properties": {
          "oldPatientsToBeRemoved": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "List of patient IDs to be removed"
          },
          "newPatientsToBeAdded": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PatientDetail"
            },
            "description": "List of new incare patient details to be added"
          }
        }
      },
      "PatientDetail": {
        "type": "object",
        "properties": {
          "patientId": {
            "type": "string",
            "description": "Patient ID"
          },
          "date": {
            "type": "string",
            "format": "date-time",
            "description": "Date of the patient encounter"
          }
        }
      },
      "PatientFullRepresentation": {
        "type": "object",
        "properties": {
          "uuid": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "searchQuery": {
            "type": "string"
          },
          "patients": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PatientDetailFull"
            }
          },
          "retired": {
            "type": "boolean"
          },
          "retiredBy": {
            "type": "string"
          },
          "retireReason": {
            "type": "string"
          },
          "auditInfo": {
            "$ref": "#/components/schemas/AuditInfo"
          },
          "resourceVersion": {
            "type": "string"
          }
        }
      },
      "PatientDetailFull": {
        "type": "object",
        "properties": {
          "uuid": {
            "type": "string"
          },
          "display": {
            "type": "string"
          },
          "gender": {
            "type": "string"
          },
          "age": {
            "type": "integer"
          },
          "birthdate": {
            "type": "string",
            "format": "date"
          },
          "encounters": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/EncounterDetail"
            }
          }
        }
      },
      "EncounterDetail": {
        "type": "object",
        "properties": {
          "uuid": {
            "type": "string"
          },
          "display": {
            "type": "string"
          },
          "encounterType": {
            "type": "string"
          },
          "encounterDatetime": {
            "type": "string",
            "format": "datetime"
          },
          "provider": {
            "type": "string"
          },
          "obs": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ObsDetail"
            }
          }
        }
      },
      "ObsDetail": {
        "type": "object",
        "properties": {
          "uuid": {
            "type": "string"
          },
          "display": {
            "type": "string"
          },
          "obsDatetime": {
            "type": "string",
            "format": "datetime"
          },
          "value": {
            "type": "string"
          },
          "comment": {
            "type": "string"
          },
          "order": {
            "type": "string"
          }
        }
      },
      "AuditInfo": {
        "type": "object",
        "properties": {
          "creator": {
            "type": "string"
          },
          "dateCreated": {
            "type": "string",
            "format": "datetime"
          },
          "changedBy": {
            "type": "string"
          },
          "dateChanged": {
            "type": "string",
            "format": "datetime"
          }
        }
      },
      "AadhaarOtpRequest": {
        "type": "object",
        "required": [
          "aadhaar"
        ],
        "properties": {
          "aadhaar": {
            "type": "string",
            "description": "Aadhaar number",
            "example": "************"
          }
        }
      },
      "VerifyOtpRequest": {
        "type": "object",
        "required": [
          "otp",
          "txnId"
        ],
        "properties": {
          "otp": {
            "type": "string",
            "description": "OTP",
            "example": "******"
          },
          "txnId": {
            "type": "string",
            "description": "transaction id string."
          }
        }
      },
      "MobileOtpRequest": {
        "type": "object",
        "required": [
          "mobile",
          "txnId"
        ],
        "properties": {
          "mobile": {
            "type": "string",
            "description": "mobile number",
            "example": "**********"
          },
          "txnId": {
            "type": "string",
            "description": "transaction id string."
          }
        }
      },
      "AadhaarOtpResponse": {
        "type": "object",
        "properties": {
          "txnId": {
            "type": "string",
            "description": "Transaction ID"
          },
          "resCode": {
            "type": "integer",
            "description": "Response code"
          }
        }
      },
      "AddressResponse": {
        "type": "object",
        "properties": {
          "authMethods": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "blockedAuthMethods": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "healthIdNumber": {
            "type": "string"
          },
          "status": {
            "type": "string"
          }
        },
        "example": {
          "authMethods": [
            "AADHAAR_OTP",
            "MOBILE_OTP"
          ],
          "blockedAuthMethods": [],
          "healthIdNumber": "**-****-****-****",
          "status": "ACTIVE"
        }
      },
      "Response": {
        "type": "object",
        "properties": {
          "healthIdNumber": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "gender": {
            "type": "string"
          },
          "yearOfBirth": {
            "type": "string"
          },
          "monthOfBirth": {
            "type": "string"
          },
          "dayOfBirth": {
            "type": "string"
          },
          "firstName": {
            "type": "string"
          },
          "healthId": {
            "type": "string"
          },
          "lastName": {
            "type": "string"
          },
          "stateCode": {
            "type": "string"
          },
          "districtCode": {
            "type": "string"
          },
          "email": {
            "type": "string"
          },
          "kycPhoto": {
            "type": "string"
          },
          "profilePhoto": {
            "type": "string"
          },
          "mobile": {
            "type": "string"
          },
          "authMethods": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "pincode": {
            "type": "string"
          },
          "tags": {
            "type": "object"
          },
          "new": {
            "type": "boolean"
          },
          "resCode": {
            "type": "integer"
          },
          "otpRequestDetails": {
            "type": "object",
            "properties": {
              "requestId": {
                "type": "string"
              }
            }
          }
        }
      },
      "AuthInitRequest": {
        "type": "object",
        "properties": {
          "abhaNumber": {
            "type": "string",
            "example": "**-****-****-****"
          },
          "authMode": {
            "type": "string",
            "example": "MOBILE_OTP/AADHAR_OTP"
          }
        }
      },
      "AuthInitResponse": {
        "type": "object",
        "properties": {
          "phrRequestId": {
            "type": "string"
          }
        },
        "example": {
          "phrRequestId": "38e759f3-e2c1-4c60-a6a0-946483e78363"
        }
      },
      "AuthConfirmResponse": {
        "type": "object",
        "properties": {
          "name": {
            "type": "object",
            "properties": {
              "first": {
                "type": "string"
              },
              "middle": {
                "type": "string"
              },
              "last": {
                "type": "string"
              }
            }
          },
          "gender": {
            "type": "string"
          },
          "dateOfBirth": {
            "type": "object",
            "properties": {
              "date": {
                "type": "integer"
              },
              "month": {
                "type": "integer"
              },
              "year": {
                "type": "integer"
              }
            }
          },
          "healthIdNumber": {
            "type": "string"
          },
          "address": {
            "type": "string"
          },
          "stateName": {
            "type": "string"
          },
          "stateCode": {
            "type": "string"
          },
          "districtName": {
            "type": "string"
          },
          "districtCode": {
            "type": "string"
          },
          "pincode": {
            "type": "string"
          },
          "aadhaarVerified": {
            "type": "boolean"
          },
          "profilePhoto": {
            "type": "string"
          },
          "authMethods": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "email": {
            "type": "string"
          },
          "mobile": {
            "type": "string"
          },
          "kycPhoto": {
            "type": "string"
          },
          "phrAddress": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "tags": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            }
          },
          "linkedPhrAddess": {
            "type": "integer"
          },
          "kycVerified": {
            "type": "string"
          },
          "verificationStatus": {
            "type": "string"
          },
          "verificationType": {
            "type": "string"
          },
          "townName": {
            "type": "string"
          },
          "emailVerified": {
            "type": "boolean"
          },
          "mobileVerified": {
            "type": "boolean"
          }
        }
      },
      "PatientRequests": {
        "type": "object",
        "properties": {
          "subscriptions": {
            "$ref": "#/components/schemas/RequestList"
          },
          "consents": {
            "$ref": "#/components/schemas/RequestList"
          },
          "authorizations": {
            "$ref": "#/components/schemas/RequestList"
          },
          "lockerSetups": {
            "$ref": "#/components/schemas/LockerSetup"
          }
        }
      },
      "RequestList": {
        "type": "object",
        "properties": {
          "size": {
            "type": "number"
          },
          "offset": {
            "type": "number"
          },
          "limit": {
            "type": "number"
          },
          "requests": {
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        }
      },
      "LockerSetup": {
        "type": "object",
        "properties": {
          "size": {
            "type": "number"
          },
          "offset": {
            "type": "number"
          },
          "limit": {
            "type": "number"
          },
          "requests": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/LockerRequest"
            }
          }
        }
      },
      "LockerRequest": {
        "type": "object",
        "properties": {
          "authorization": {
            "$ref": "#/components/schemas/Authorization"
          },
          "subscription": {
            "$ref": "#/components/schemas/Subscription"
          }
        }
      },
      "Authorization": {
        "type": "object",
        "properties": {
          "authMode": {
            "type": "string"
          },
          "requester": {
            "$ref": "#/components/schemas/Requester"
          },
          "createdAt": {
            "type": "string"
          },
          "lastUpdated": {
            "type": "string"
          },
          "patientId": {
            "type": "string"
          },
          "purpose": {
            "$ref": "#/components/schemas/Purpose"
          },
          "requestId": {
            "type": "string"
          },
          "status": {
            "type": "string"
          }
        }
      },
      "Subscription": {
        "type": "object",
        "properties": {
          "createdAt": {
            "type": "string"
          },
          "lastUpdated": {
            "type": "string"
          },
          "period": {
            "$ref": "#/components/schemas/Period"
          },
          "requesterType": {
            "type": "string"
          },
          "hips": {
            "type": "string"
          },
          "purpose": {
            "$ref": "#/components/schemas/PhrRequestPurpose"
          },
          "hiu": {
            "$ref": "#/components/schemas/Requester"
          },
          "patient": {
            "type": "object",
            "properties": {
              "id": {
                "type": "string"
              }
            }
          },
          "id": {
            "type": "string"
          },
          "categories": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "subscriptionId": {
            "type": "string"
          },
          "status": {
            "type": "string"
          }
        }
      },
      "Requester": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string"
          },
          "id": {
            "type": "string"
          },
          "type": {
            "type": "string"
          }
        }
      },
      "PhrRequestPurpose": {
        "type": "object",
        "properties": {
          "code": {
            "type": "string"
          },
          "text": {
            "type": "string"
          },
          "refUri": {
            "type": "string"
          }
        }
      },
      "Period": {
        "type": "object",
        "properties": {
          "from": {
            "type": "string"
          },
          "to": {
            "type": "string"
          }
        }
      },
      "SimpleObject": {
        "type": "object",
        "properties": {
          "patientUuid": {
            "$ref": "#/components/schemas/Uuid"
          },
          "securityGroupId": {
            "type": "string"
          }
        }
      },
      "PatientDetailsResponse": {
        "type": "object",
        "properties": {
          "incare": {
            "type": "boolean"
          },
          "personAttributes": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PersonAttribute"
            }
          },
          "personAddress": {
            "type": "string"
          },
          "givenName": {
            "type": "string"
          },
          "familyName": {
            "type": "string"
          },
          "prefix": {
            "type": "string"
          },
          "age": {
            "type": "integer"
          },
          "birthdate": {
            "type": "string",
            "format": "date-time"
          },
          "gender": {
            "type": "string"
          },
          "weight": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Observation"
            }
          },
          "height": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Observation"
            }
          },
          "finalDiagnosis": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Observation"
            }
          },
          "respiratoryRate": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Observation"
            }
          },
          "pulse": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Observation"
            }
          },
          "temperature": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Observation"
            }
          },
          "systolicBP": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Observation"
            }
          },
          "diastolicBP": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Observation"
            }
          },
          "bloodOxySat": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Observation"
            }
          },
          "patientStatus": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Observation"
            }
          },
          "order": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Order"
            }
          },
          "accessPath": {
            "type": "array",
            "items": {
              "type": "array",
              "items": {
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/Person"
                  },
                  {
                    "$ref": "#/components/schemas/Group"
                  },
                  {
                    "type": "string"
                  }
                ]
              }
            }
          }
        }
      },
      "PersonAttribute": {
        "type": "object",
        "properties": {
          "attributeUuid": {
            "$ref": "#/components/schemas/Uuid"
          },
          "attributeType": {
            "type": "string"
          },
          "value": {
            "type": "string"
          }
        }
      },
      "Observation": {
        "type": "object",
        "properties": {
          "uuid": {
            "$ref": "#/components/schemas/Uuid"
          },
          "obsDatetime": {
            "type": "string",
            "format": "date-time"
          },
          "value": {
            "type": "string"
          },
          "concept": {
            "$ref": "#/components/schemas/Concept"
          },
          "comment": {
            "type": "string"
          },
          "order": {
            "type": "string"
          }
        }
      },
      "Concept": {
        "type": "object",
        "properties": {
          "conceptClass": {
            "$ref": "#/components/schemas/ConceptClass"
          },
          "datatype": {
            "$ref": "#/components/schemas/Datatype"
          },
          "names": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ConceptName"
            }
          },
          "uuid": {
            "$ref": "#/components/schemas/Uuid"
          }
        }
      },
      "ConceptClass": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "uuid": {
            "$ref": "#/components/schemas/Uuid"
          }
        }
      },
      "Datatype": {
        "type": "object",
        "properties": {
          "uuid": {
            "$ref": "#/components/schemas/Uuid"
          },
          "description": {
            "type": "string"
          },
          "name": {
            "type": "string"
          }
        }
      },
      "ConceptName": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string"
          },
          "uuid": {
            "$ref": "#/components/schemas/Uuid"
          }
        }
      },
      "Order": {
        "type": "object",
        "properties": {
          "uuid": {
            "$ref": "#/components/schemas/Uuid"
          },
          "orderer": {
            "type": "string"
          },
          "orderType": {
            "$ref": "#/components/schemas/OrderType"
          },
          "instructions": {
            "type": "string"
          },
          "startDate": {
            "type": "string",
            "format": "date-time"
          },
          "autoExpireDate": {
            "type": "string",
            "format": "date-time"
          },
          "dose": {
            "type": "string"
          },
          "units": {
            "type": "string"
          },
          "frequency": {
            "type": "string"
          },
          "quantity": {
            "type": "number"
          },
          "drug": {
            "$ref": "#/components/schemas/Drug"
          }
        }
      },
      "OrderType": {
        "type": "object",
        "properties": {
          "uuid": {
            "$ref": "#/components/schemas/Uuid"
          },
          "display": {
            "type": "string"
          }
        }
      },
      "Drug": {
        "type": "object",
        "properties": {
          "uuid": {
            "$ref": "#/components/schemas/Uuid"
          },
          "display": {
            "type": "string"
          },
          "dosage": {
            "type": "string"
          },
          "units": {
            "type": "string"
          }
        }
      },
      "Person": {
        "type": "object",
        "properties": {
          "type": {
            "type": "string"
          },
          "id": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "uuid": {
            "$ref": "#/components/schemas/Uuid"
          }
        }
      },
      "Group": {
        "type": "object",
        "properties": {
          "type": {
            "type": "string"
          },
          "id": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "uuid": {
            "$ref": "#/components/schemas/Uuid"
          }
        }
      },
      "PatientV2": {
        "type": "object",
        "required": [
          "age",
          "attributes",
          "encounterDatetime",
          "encounterType",
          "gender",
          "names",
          "obsHeight",
          "obsWeight",
          "patient",
          "provider",
          "uuid"
        ],
        "properties": {
          "age": {
            "type": "integer"
          },
          "attributes": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Attribute"
            }
          },
          "encounterDatetime": {
            "type": "string"
          },
          "encounterType": {
            "type": "string"
          },
          "gender": {
            "type": "string"
          },
          "locationId": {
            "type": "string",
            "nullable": true
          },
          "names": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Name"
            }
          },
          "obsHeight": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Obs"
            }
          },
          "obsWeight": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Obs"
            }
          },
          "patient": {
            "type": "string"
          },
          "provider": {
            "type": "string"
          },
          "uuid": {
            "$ref": "#/components/schemas/Uuid"
          }
        }
      },
      "Attribute": {
        "type": "object",
        "required": [
          "attributeType",
          "value"
        ],
        "properties": {
          "attributeType": {
            "type": "string"
          },
          "value": {
            "type": "string"
          }
        }
      },
      "Name": {
        "type": "object",
        "required": [
          "familyName",
          "givenName"
        ],
        "properties": {
          "familyName": {
            "type": "string"
          },
          "givenName": {
            "type": "string"
          }
        }
      },
      "Obs": {
        "type": "object",
        "required": [
          "concept",
          "value"
        ],
        "properties": {
          "concept": {
            "type": "string"
          },
          "value": {
            "type": "integer"
          }
        }
      },
      "PatientResponse": {
        "type": "object",
        "properties": {
          "uuid": {
            "$ref": "#/components/schemas/Uuid"
          },
          "name": {
            "type": "string",
            "description": "Patient's name"
          },
          "identifier": {
            "type": "string",
            "description": "Patient's identifier"
          }
        }
      },
      "AuthRequest": {
        "type": "object",
        "properties": {
          "authCode": {
            "$ref": "#/components/schemas/AuthCode"
          },
          "requestId": {
            "$ref": "#/components/schemas/Uuid"
          },
          "zone": {
            "$ref": "#/components/schemas/Zone"
          }
        }
      },
      "AuthResponse": {
        "type": "object",
        "properties": {
          "authReqId": {
            "$ref": "#/components/schemas/Uuid"
          },
          "sentSuccessFull": {
            "type": "boolean",
            "example": true
          }
        }
      },
      "AuthCode": {
        "type": "string",
        "example": "******"
      },
      "Uuid": {
        "type": "string",
        "example": "38e759f3-e2c1-4c60-a6a0-946483e78363"
      },
      "Zone": {
        "type": "string",
        "example": "UTC"
      },
      "InitAuthRequest": {
        "type": "object",
        "properties": {
          "authMode": {
            "$ref": "#/components/schemas/AuthMode"
          },
          "id": {
            "$ref": "#/components/schemas/Id"
          },
          "location": {
            "$ref": "#/components/schemas/Location"
          },
          "purpose": {
            "$ref": "#/components/schemas/Purpose"
          },
          "zone": {
            "$ref": "#/components/schemas/Zone"
          }
        }
      },
      "InitAuthResponse": {
        "type": "object",
        "properties": {
          "requestId": {
            "$ref": "#/components/schemas/RequestId"
          },
          "sentSuccessFull": {
            "$ref": "#/components/schemas/SentSuccessFull"
          }
        }
      },
      "AuthMode": {
        "type": "string",
        "example": "MOBILE_OTP",
        "description": "Authentication mode"
      },
      "Id": {
        "type": "string",
        "example": "himashuprod@abdm",
        "description": "The ID of the user"
      },
      "Location": {
        "type": "string",
        "example": "e6df5088-ff29-4085-829e-34a8e9f3d093",
        "description": "Location of the user"
      },
      "Purpose": {
        "type": "string",
        "example": "KYC_AND_LINK",
        "description": "Purpose of the operation"
      },
      "RequestId": {
        "type": "string",
        "example": "38e759f3-e2c1-4c60-a6a0-946483e78363",
        "description": "Request ID"
      },
      "SentSuccessFull": {
        "type": "boolean",
        "example": true,
        "description": "Indicates if the OTP was sent successfully"
      },
      "PatientListRequest": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "Name of the patient list"
          },
          "description": {
            "type": "string",
            "description": "Description of the patient list"
          },
          "searchQuery": {
            "type": "string",
            "description": "Search query for the patient list"
          }
        }
      },
      "PatientListArrayResponse": {
        "type": "object",
        "properties": {
          "results": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PatientListResponse"
            }
          }
        }
      },
      "PatientListResponse": {
        "type": "object",
        "properties": {
          "uuid": {
            "type": "string",
            "description": "Unique identifier of the new patient list"
          },
          "name": {
            "type": "string",
            "description": "Name of the patient list"
          },
          "description": {
            "type": "string",
            "description": "Description of the patient list"
          }
        }
      },
      "PatientListRequestV5": {
        "type": "object",
        "properties": {
          "oldPatientsList": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "List of old patient Ids"
          },
          "groupIds": {
            "type": "array",
            "items": {
              "type": "integer"
            },
            "description": "List of patient group Ids"
          }
        }
      },
      "DelinkAbhaRequest": {
        "type": "object",
        "properties": {
          "patientPersonUuid": {
            "type": "string",
            "example": "729122b7-c26d-42ff-a4a1-31cc5e277e93"
          },
          "healthid": {
            "type": "string"
          },
          "abhaNumber": {
            "type": "string"
          }
        }
      },
      "DelinkAbhaResponse": {
        "type": "object",
        "properties": {
          "patientHealthIdIdentifierExists": {
            "type": "string",
            "example": "false"
          },
          "AbhaNumberRemoved": {
            "type": "string"
          },
          "AbhaAddressRemoved": {
            "type": "string",
            "example": "true"
          }
        }
      },
      "AccessPath": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "ID part of the access path"
          },
          "type": {
            "type": "string",
            "description": "Type part of the access path"
          }
        }
      },
      "AllPatientDetails": {
        "type": "object",
        "properties": {
          "uuid": {
            "type": "string",
            "description": "Unique identifier of the patient"
          },
          "id": {
            "type": "integer",
            "description": "ID of the patient"
          },
          "display": {
            "type": "string",
            "description": "Display name of the patient"
          },
          "gender": {
            "type": "string",
            "description": "Gender of the patient"
          },
          "age": {
            "type": "integer",
            "description": "Age of the patient"
          },
          "birthdate": {
            "type": "string",
            "description": "Birthdate of the patient"
          },
          "accessPath": {
            "type": "array",
            "items": {
              "oneOf": [
                {
                  "$ref": "#/components/schemas/AccessPath"
                },
                {
                  "type": "string"
                }
              ]
            },
            "description": "Access path(s) for the patient"
          },
          "encounterDatetime": {
            "type": "integer",
            "description": "Date/time of the encounter - epoch time in milliseconds"
          }
        }
      },
      "InCarePatientDetails": {
        "allOf": [
          {
            "$ref": "#/components/schemas/AllPatientDetails"
          },
          {
            "type": "object",
            "properties": {
              "registrationNumber": {
                "type": "string",
                "description": "Registration number of the patient"
              }
            }
          }
        ]
      },
      "PatientListResponseV5": {
        "type": "object",
        "properties": {
          "all": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/AllPatientDetails"
            },
            "description": "All patients associated to a provider"
          },
          "incare": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/InCarePatientDetails"
            },
            "description": "Patient details currently in care"
          },
          "oldPatientsToBeRemoved": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "List of patient Ids to be removed"
          }
        }
      },
      "ClinicInput": {
        "type": "object",
        "properties": {
          "clinics": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Clinic"
            }
          }
        }
      },
      "Clinic": {
        "type": "object",
        "properties": {
          "location": {
            "$ref": "#/components/schemas/ClinicLocation"
          },
          "speciality": {
            "type": "string"
          },
          "duration": {
            "type": "integer"
          },
          "appointmentMode": {
            "type": "object",
            "properties": {
              "name": {
                "type": "string"
              },
              "uuid": {
                "type": "string"
              }
            }
          },
          "fromDate": {
            "type": "string",
            "format": "date-time"
          },
          "fromTime": {
            "type": "string"
          },
          "toDate": {
            "type": "string",
            "format": "date-time"
          },
          "toTime": {
            "type": "string"
          },
          "workingDays": {
            "type": "array",
            "items": {
              "type": "integer"
            }
          },
          "appointmentFees": {
            "type": "integer"
          }
        }
      },
      "ClinicLocation": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string"
          },
          "address1": {
            "type": "string"
          },
          "cityVillage": {
            "type": "string"
          },
          "postalCode": {
            "type": "string"
          },
          "stateProvince": {
            "type": "string"
          },
          "country": {
            "type": "string"
          },
          "latitude": {
            "type": "string"
          },
          "longitude": {
            "type": "string"
          },
          "tags": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "Name": {
                  "type": "string"
                }
              }
            }
          }
        }
      },
      "ClinicResponse": {
        "type": "object",
        "properties": {
          "speciality": {
            "$ref": "#/components/schemas/Speciality"
          },
          "AppointmentFees": {
            "$ref": "#/components/schemas/AppointmentFees"
          },
          "links": {
            "$ref": "#/components/schemas/links"
          },
          "appointmentSaveClinicLocation": {
            "$ref": "#/components/schemas/AppointmentClinicLocation"
          },
          "appointmentTypes": {
            "$ref": "#/components/schemas/AppointmentTypesArray"
          },
          "AppointmentProvider": {
            "$ref": "#/components/schemas/AppointmentProvider"
          },
          "display": {
            "type": "string"
          },
          "startDate": {
            "type": "string"
          },
          "endDate": {
            "type": "string"
          },
          "resourceVersion": {
            "type": "string"
          },
          "voided": {
            "type": "boolean"
          },
          "uuid": {
            "type": "string"
          }
        }
      },
      "Speciality": {
        "type": "object",
        "properties": {
          "duration": {
            "type": "number"
          },
          "display": {
            "type": "string"
          },
          "resourceVersion": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "retired": {
            "type": "boolean"
          },
          "links": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Link"
            }
          },
          "uuid": {
            "type": "string"
          },
          "confidential": {
            "type": "boolean"
          },
          "visitType": {
            "$ref": "#/components/schemas/ClinicVisitType"
          }
        }
      },
      "ClinicVisitType": {
        "type": "object",
        "properties": {
          "display": {
            "type": "string"
          },
          "resourceVersion": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "retired": {
            "type": "boolean"
          },
          "links": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Link"
            }
          },
          "uuid": {
            "type": "string"
          }
        }
      },
      "AppointmentProvider": {
        "type": "object",
        "properties": {
          "identifier": {
            "type": "string"
          },
          "person": {
            "$ref": "#/components/schemas/AppointmentProviderPerson"
          },
          "display": {
            "type": "string"
          },
          "resourceVersion": {
            "type": "string"
          },
          "attributes": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/AppointmentSavingAttribute"
            }
          },
          "retired": {
            "type": "boolean"
          },
          "links": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Link"
            }
          },
          "uuid": {
            "type": "string"
          }
        }
      },
      "AppointmentProviderPerson": {
        "type": "object",
        "properties": {
          "display": {
            "type": "string"
          },
          "links": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Link"
            }
          },
          "uuid": {
            "type": "string"
          }
        }
      },
      "AppointmentSavingAttribute": {
        "type": "object",
        "properties": {
          "display": {
            "type": "string"
          },
          "links": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Link"
            }
          },
          "uuid": {
            "type": "string"
          }
        }
      },
      "AppointmentFees": {
        "type": "object",
        "properties": {
          "amount": {
            "type": "integer"
          },
          "blockUuid": {
            "type": "string"
          }
        }
      },
      "links": {
        "type": "array",
        "items": {
          "$ref": "#/components/schemas/Link"
        }
      },
      "AppointmentTypesArray": {
        "type": "array",
        "items": {
          "$ref": "#/components/schemas/AppointmentTypeUnit"
        }
      },
      "AppointmentTypeUnit": {
        "type": "object",
        "properties": {
          "display": {
            "type": "string",
            "description": "Display identifier for the type."
          },
          "links": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Link"
            },
            "description": "Array of associated links for the type."
          },
          "uuid": {
            "type": "string",
            "format": "uuid",
            "description": "The universally unique identifier for the type."
          }
        }
      },
      "AppointmentClinicLocation": {
        "type": "object",
        "properties": {
          "uuid": {
            "type": "string",
            "format": "uuid",
            "description": "The universally unique identifier for the location."
          },
          "address1": {
            "type": "string",
            "description": "First line of the address."
          },
          "address2": {
            "type": "string",
            "nullable": true,
            "description": "Second line of the address."
          },
          "address3": {
            "type": "string",
            "nullable": true,
            "description": "Third line of the address."
          },
          "address4": {
            "type": "string",
            "nullable": true,
            "description": "Fourth line of the address."
          },
          "address5": {
            "type": "string",
            "nullable": true,
            "description": "Fifth line of the address."
          },
          "address6": {
            "type": "string",
            "nullable": true,
            "description": "Sixth line of the address."
          },
          "cityVillage": {
            "type": "string",
            "nullable": true,
            "description": "Name of the city or village."
          },
          "country": {
            "type": "string",
            "nullable": true,
            "description": "Name of the country."
          },
          "description": {
            "type": "string",
            "description": "Description of the location."
          },
          "display": {
            "type": "string",
            "description": "Display string for the location."
          },
          "latitude": {
            "type": "string",
            "description": "Latitude coordinate of the location."
          },
          "longitude": {
            "type": "string",
            "description": "Longitude coordinate of the location."
          },
          "name": {
            "type": "string",
            "description": "Name of the location."
          },
          "stateProvince": {
            "type": "string",
            "nullable": true,
            "description": "Name of the state or province."
          },
          "postalCode": {
            "type": "string",
            "nullable": true,
            "description": "Postal code for the location"
          }
        }
      },
      "AppointmentTypeRequestBody": {
        "type": "object",
        "additionalProperties": true,
        "description": "Request body as a map for appointment type."
      },
      "AppointmentTypeResponse": {
        "type": "object",
        "additionalProperties": true,
        "description": "Response body as a map after processing the forwarded request."
      },
      "Error": {
        "type": "object",
        "properties": {
          "error": {
            "type": "string",
            "description": "Error message"
          }
        }
      },
      "GetAppointmentBlock": {
        "type": "array",
        "items": {
          "$ref": "#/components/schemas/Result"
        }
      },
      "Result": {
        "type": "object",
        "properties": {
          "types": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/AppointmentTypesArray"
            }
          },
          "endDate": {
            "type": "string",
            "format": "date-time"
          },
          "provider": {
            "$ref": "#/components/schemas/AppointmentProvider"
          },
          "display": {
            "type": "string"
          },
          "resourceVersion": {
            "type": "string"
          },
          "location": {
            "$ref": "#/components/schemas/GetAppointmentLocation"
          },
          "voided": {
            "type": "boolean"
          },
          "links": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Link"
            }
          },
          "uuid": {
            "type": "string"
          },
          "startDate": {
            "type": "string",
            "format": "date-time"
          }
        }
      },
      "GetAppointmentLocation": {
        "type": "object",
        "properties": {
          "display": {
            "type": "string"
          },
          "links": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Link"
            }
          },
          "uuid": {
            "type": "string"
          }
        }
      },
      "AppointmentResponse": {
        "type": "array",
        "items": {
          "type": "object",
          "properties": {
            "reason": {
              "type": "string"
            },
            "appointmentType": {
              "type": "object",
              "properties": {
                "display": {
                  "type": "string"
                },
                "links": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Link"
                  }
                },
                "uuid": {
                  "type": "string"
                }
              }
            },
            "display": {
              "type": "string"
            },
            "resourceVersion": {
              "type": "string"
            },
            "endDateTime": {
              "type": "string",
              "format": "date-time"
            },
            "uuid": {
              "type": "string"
            },
            "startDateTime": {
              "type": "string",
              "format": "date-time"
            },
            "voided": {
              "type": "boolean"
            },
            "links": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/Link"
              }
            },
            "timeSlot": {
              "type": "object",
              "properties": {
                "countOfAppointments": {
                  "type": "number",
                  "format": "float"
                },
                "endDate": {
                  "type": "string",
                  "format": "date-time"
                },
                "display": {
                  "type": "string"
                },
                "resourceVersion": {
                  "type": "string"
                },
                "unallocatedMinutes": {
                  "type": "number",
                  "format": "float"
                },
                "voided": {
                  "type": "boolean"
                },
                "links": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Link"
                  }
                },
                "appointmentBlock": {
                  "$ref": "#/components/schemas/AppointmentBlock"
                },
                "uuid": {
                  "type": "string"
                },
                "startDate": {
                  "type": "string",
                  "format": "date-tim"
                }
              }
            },
            "AppointmentBlock": {
              "type": "object",
              "properties": {
                "types": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/AppointmentTypesArray"
                  }
                },
                "endDate": {
                  "type": "string",
                  "format": "date-time"
                },
                "provider": {
                  "$ref": "#/components/schemas/AppointmentProvider"
                },
                "display": {
                  "type": "string"
                },
                "resourceVersion": {
                  "type": "string"
                },
                "location": {
                  "$ref": "#/components/schemas/GetAppointmentLocation"
                },
                "voided": {
                  "type": "boolean"
                },
                "links": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Link"
                  }
                },
                "uuid": {
                  "type": "string"
                },
                "startDate": {
                  "type": "string",
                  "format": "date-time"
                }
              }
            }
          }
        }
      },
      "BookedSlot": {
        "type": "object",
        "properties": {
          "startDateTime": {
            "type": "string",
            "format": "date-time",
            "example": "2023-12-12 18:35:00.0"
          },
          "endDateTime": {
            "type": "string",
            "format": "date-time",
            "example": "2023-12-12 18:50:00.0"
          }
        }
      },
      "getBookdSlotError": {
        "type": "object",
        "properties": {
          "code": {
            "type": "integer"
          },
          "message": {
            "type": "string"
          }
        }
      },
      "VisitRequest": {
        "type": "object",
        "properties": {
          "location": {
            "type": "string",
            "description": "Location UUID",
            "example": "93f0d00e-9f89-4632-9216-48a017a8f3eb"
          },
          "myVisits": {
            "type": "boolean",
            "description": "Flag to determine if the visits belong to the querying patient",
            "example": false
          },
          "patient": {
            "type": "string",
            "description": "Patient UUID",
            "example": "ea108d4c-dd9a-e400-8797-c90482b67feb"
          }
        },
        "required": [
          "location",
          "myVisits",
          "patient"
        ]
      },
      "VisitResponse": {
        "type": "object",
        "properties": {
          "result": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/VisitDetail"
            }
          }
        }
      },
      "VisitDetail": {
        "type": "object",
        "properties": {
          "patient": {
            "type": "string",
            "example": "ea108d4c-dd9a-e400-8797-c90482b67feb"
          },
          "author": {
            "type": "string",
            "example": "Prateek Dubey"
          },
          "location": {
            "$ref": "#/components/schemas/ClinicLocation"
          },
          "uuid": {
            "type": "string",
            "example": "6e34dfb7-cf7f-4a1f-9a65-f49f700b0bad"
          },
          "startDate": {
            "type": "string",
            "format": "date-time",
            "example": "2023-09-05 11:23:51.0"
          },
          "stopDate": {
            "type": "string",
            "format": "date-time"
          },
          "status": {
            "type": "string",
            "example": "ACTIVE"
          },
          "visitType": {
            "$ref": "#/components/schemas/VisitType"
          }
        }
      },
      "VisitType": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "example": "In Patient Visit"
          },
          "uuid": {
            "type": "string",
            "example": "45a64462-a147-47cf-bcc2-87ce3a5bbb75"
          }
        }
      },
      "StartVisitRequest": {
        "type": "object",
        "properties": {
          "location": {
            "type": "string",
            "description": "Location UUID",
            "example": "7b81bdd2-5c2b-4e8f-816d-3e2c9df88179"
          },
          "patient": {
            "type": "string",
            "description": "Patient UUID",
            "example": "188425d0-3b40-49e9-9c12-ffb8b94d87fe"
          },
          "visitType": {
            "type": "string",
            "description": "Visit type UUID",
            "example": "7b0f5697-27e3-40c4-8bae-f4049abfb4ed"
          }
        },
        "required": [
          "location",
          "patient",
          "visitType"
        ]
      },
      "StartVisitResponse": {
        "type": "object",
        "properties": {
          "result": {
            "$ref": "#/components/schemas/StartVisitDetail"
          }
        }
      },
      "StartVisitDetail": {
        "type": "object",
        "properties": {
          "patient": {
            "type": "string",
            "example": "188425d0-3b40-49e9-9c12-ffb8b94d87fe"
          },
          "uuid": {
            "type": "string",
            "example": "dd154069-3b01-4b15-a41e-ff47cd9c0bfb"
          },
          "startDate": {
            "type": "string",
            "format": "date-time",
            "example": "Sat Sep 23 08:58:22 UTC 2023"
          },
          "status": {
            "type": "string",
            "example": "ACTIVE"
          },
          "visitType": {
            "$ref": "#/components/schemas/VisitType"
          }
        }
      },
      "EndVisitRequest": {
        "type": "object",
        "properties": {
          "uuid": {
            "type": "string",
            "description": "UUID of the visit to be ended",
            "example": "dd154069-3b01-4b15-a41e-ff47cd9c0bfb"
          }
        },
        "required": [
          "uuid"
        ]
      },
      "Visit": {
        "type": "object",
        "properties": {
          "uuid": {
            "type": "string"
          },
          "status": {
            "type": "string",
            "enum": [
              "ACTIVE"
            ]
          },
          "startDate": {
            "type": "string",
            "format": "date-time"
          },
          "stopDate": {
            "type": "string",
            "format": "date-time"
          },
          "visitType": {
            "$ref": "#/components/schemas/VisitType"
          },
          "patient": {
            "type": "string"
          }
        }
      },
      "VisitEncounter": {
        "type": "object",
        "properties": {
          "uuid": {
            "type": "string"
          },
          "display": {
            "type": "string"
          },
          "encounterDatetime": {
            "type": "string"
          },
          "patient": {
            "$ref": "#/components/schemas/MiniPatient"
          },
          "location": {
            "$ref": "#/components/schemas/MiniLocation"
          },
          "encounterType": {
            "$ref": "#/components/schemas/EncounterType"
          },
          "isBahmniEligible": {
            "type": "boolean"
          },
          "bahmniEncounterUuid": {
            "type": "string"
          },
          "obs": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/VisitEncounterObservation"
            }
          },
          "provider": {
            "$ref": "#/components/schemas/VisitEncounterProvider"
          }
        }
      },
      "MiniPatient": {
        "type": "object",
        "properties": {
          "uuid": {
            "type": "string"
          },
          "display": {
            "type": "string"
          }
        }
      },
      "MiniLocation": {
        "type": "object",
        "properties": {
          "uuid": {
            "type": "string"
          },
          "display": {
            "type": "string"
          }
        }
      },
      "EncounterType": {
        "type": "object",
        "properties": {
          "uuid": {
            "type": "string"
          },
          "display": {
            "type": "string"
          }
        }
      },
      "VisitEncounterObservation": {
        "type": "object",
        "properties": {
          "uuid": {
            "type": "string"
          },
          "obsDatetime": {
            "type": "string"
          },
          "value": {
            "type": "string"
          },
          "concept": {
            "$ref": "#/components/schemas/VisitEncounterConcept"
          },
          "comment": {
            "type": "string"
          },
          "order": {
            "type": "string"
          }
        }
      },
      "VisitEncounterConcept": {
        "type": "object",
        "properties": {
          "conceptClass": {
            "$ref": "#/components/schemas/VisitEncounterConceptClass"
          },
          "datatype": {
            "$ref": "#/components/schemas/DataType"
          },
          "names": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/VisitEncounterConceptName"
            }
          },
          "uuid": {
            "type": "string"
          }
        }
      },
      "VisitEncounterConceptClass": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "uuid": {
            "type": "string"
          }
        }
      },
      "DataType": {
        "type": "object",
        "properties": {
          "uuid": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "name": {
            "type": "string"
          }
        }
      },
      "VisitEncounterConceptName": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string"
          },
          "uuid": {
            "type": "string"
          }
        }
      },
      "VisitEncounterProvider": {
        "type": "object",
        "properties": {
          "uuid": {
            "type": "string"
          },
          "personUuid": {
            "type": "string"
          },
          "display": {
            "type": "string"
          }
        }
      },
      "EncounterResponse": {
        "type": "object",
        "properties": {
          "uuid": {
            "type": "string",
            "format": "uuid"
          },
          "display": {
            "type": "string"
          },
          "encounterDatetime": {
            "type": "string",
            "format": "date-time"
          },
          "patient": {
            "$ref": "#/components/schemas/PersonReference"
          },
          "location": {
            "$ref": "#/components/schemas/LocationReference"
          },
          "encounterType": {
            "$ref": "#/components/schemas/EncounterTypeReference"
          },
          "isBahmniEligible": {
            "type": "boolean"
          },
          "bahmniEncounterUuid": {
            "type": "string"
          },
          "obs": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Observation"
            }
          },
          "orders": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/EncounterOrder"
            }
          },
          "provider": {
            "$ref": "#/components/schemas/ProviderReference"
          },
          "images": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Image"
            }
          }
        }
      },
      "PersonReference": {
        "type": "object",
        "properties": {
          "uuid": {
            "type": "string",
            "format": "uuid"
          },
          "display": {
            "type": "string"
          }
        }
      },
      "ProviderReference": {
        "type": "object",
        "properties": {
          "uuid": {
            "type": "string",
            "format": "uuid"
          },
          "personUuid": {
            "type": "string",
            "format": "uuid"
          },
          "display": {
            "type": "string"
          }
        }
      },
      "Image": {
        "type": "object",
        "properties": {
          "uuid": {
            "type": "string",
            "format": "uuid"
          },
          "title": {
            "type": "string"
          },
          "tags": {
            "type": "string"
          },
          "description": {
            "type": "string"
          }
        }
      },
      "LocationReference": {
        "type": "object",
        "properties": {
          "uuid": {
            "type": "string",
            "format": "uuid"
          },
          "display": {
            "type": "string"
          }
        }
      },
      "EncounterTypeReference": {
        "type": "object",
        "properties": {
          "uuid": {
            "type": "string",
            "format": "uuid"
          },
          "display": {
            "type": "string"
          }
        }
      },
      "EncounterOrder": {
        "type": "object",
        "properties": {
          "uuid": {
            "type": "string",
            "format": "uuid"
          },
          "startDate": {
            "type": "string",
            "format": "date-time"
          },
          "orderType": {
            "$ref": "#/components/schemas/OrderType"
          },
          "concept": {
            "type": "string",
            "format": "uuid"
          },
          "drug": {
            "$ref": "#/components/schemas/Drug"
          }
        }
      },
      "Encounter": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "patient": {
            "type": "string",
            "format": "uuid"
          },
          "encounterType": {
            "type": "string",
            "format": "uuid"
          },
          "encounterDatetime": {
            "type": "string",
            "format": "date-time"
          },
          "provider": {
            "type": "string",
            "format": "uuid"
          },
          "obs": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PostEncounterObs"
            }
          },
          "orders": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PostEncounterOrder"
            }
          },
          "images": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PostEncounterImage"
            }
          },
          "display": {
            "type": "string",
            "nullable": true
          },
          "uuid": {
            "type": "string",
            "format": "uuid",
            "nullable": true
          },
          "providerName": {
            "type": "string"
          },
          "patientName": {
            "type": "string"
          },
          "encounterHtml": {
            "type": "string",
            "nullable": true
          },
          "patientStatus": {
            "type": "string",
            "nullable": true
          },
          "groupId": {
            "type": "integer"
          },
          "location": {
            "type": "string",
            "format": "uuid"
          }
        }
      },
      "PostEncounterObs": {
        "type": "object",
        "properties": {
          "person": {
            "type": "string",
            "format": "uuid"
          },
          "conceptName": {
            "type": "string",
            "nullable": true
          },
          "conceptClass": {
            "type": "string"
          },
          "concept": {
            "type": "string"
          },
          "uuid": {
            "type": "string",
            "format": "uuid"
          },
          "feederService": {
            "type": "boolean"
          },
          "value": {
            "type": "string",
            "nullable": true
          },
          "comment": {
            "type": "string",
            "nullable": true
          }
        }
      },
      "PostEncounterOrder": {
        "type": "object",
        "properties": {
          "patient": {
            "type": "string",
            "format": "uuid"
          },
          "orderer": {
            "type": "string",
            "format": "uuid"
          },
          "type": {
            "type": "string",
            "enum": [
              "drugorder",
              "testorder",
              "procedureorder"
            ]
          },
          "drug": {
            "type": "string",
            "nullable": true
          },
          "concept": {
            "type": "string"
          },
          "drugFullName": {
            "type": "string",
            "nullable": true
          },
          "units": {
            "type": "integer",
            "nullable": true
          },
          "frequency": {
            "type": "string",
            "nullable": true
          },
          "drugFrequencyConceptId": {
            "type": "string",
            "nullable": true
          },
          "drugIntakeTypeValue": {
            "type": "string",
            "nullable": true
          },
          "instructions": {
            "type": "string",
            "nullable": true
          },
          "startDate": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "dose": {
            "type": "string",
            "nullable": true
          },
          "quantity": {
            "type": "integer",
            "nullable": true
          },
          "duration": {
            "type": "integer",
            "nullable": true
          },
          "autoExpireDate": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "uuid": {
            "type": "string",
            "format": "uuid"
          },
          "feederService": {
            "type": "boolean"
          }
        }
      },
      "PostEncounterImage": {
        "type": "object",
        "properties": {
          "dataURI": {
            "type": "string",
            "nullable": true
          },
          "title": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "patient": {
            "type": "string",
            "format": "uuid"
          },
          "uuid": {
            "type": "string",
            "format": "uuid"
          },
          "tags": {
            "type": "string"
          },
          "feederService": {
            "type": "boolean"
          },
          "alreadySaved": {
            "type": "boolean"
          },
          "fileName": {
            "type": "string"
          }
        }
      },
      "EncounterPostResponse": {
        "type": "object",
        "properties": {
          "uuid": {
            "type": "string",
            "format": "uuid"
          },
          "display": {
            "type": "string"
          },
          "encounterDatetime": {
            "type": "string",
            "format": "date-time"
          },
          "patient": {
            "$ref": "#/components/schemas/PersonReference"
          },
          "location": {
            "$ref": "#/components/schemas/LocationReference"
          },
          "encounterType": {
            "$ref": "#/components/schemas/EncounterTypeReference"
          },
          "isBahmniEligible": {
            "type": "boolean"
          },
          "bahmniEncounterUuid": {
            "type": "string"
          },
          "obs": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Observation"
            }
          },
          "provider": {
            "$ref": "#/components/schemas/ProviderReference"
          },
          "images": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Image"
            }
          }
        }
      },
      "PrescriptionReportRequest": {
        "type": "object",
        "required": [
          "patient",
          "encounter"
        ],
        "properties": {
          "patient": {
            "type": "string",
            "format": "uuid",
            "description": "The unique identifier of the patient."
          },
          "encounter": {
            "type": "string",
            "format": "uuid",
            "description": "The unique identifier of the encounter."
          }
        }
      },
      "PrescriptionReportResponse": {
        "type": "object",
        "properties": {
          "status": {
            "type": "string",
            "description": "The status of the report generation."
          },
          "report": {
            "type": "string",
            "description": "The path to the generated prescription report."
          }
        }
      },
      "HealthIdLinkResponse": {
        "type": "object",
        "properties": {
          "status": {
            "type": "string",
            "example": "success"
          },
          "hasLinkedABHAAddress": {
            "type": "boolean",
            "example": true
          },
          "hasLinkedABHALogin": {
            "type": "boolean",
            "example": true
          },
          "abhaDetails": {
            "$ref": "#/components/schemas/AbhaDetails"
          }
        }
      },
      "AbhaDetails": {
        "type": "object",
        "properties": {
          "linkedAbhaAddress": {
            "type": "string",
            "format": "uuid"
          },
          "linkedAbhaAccount": {
            "type": "string"
          }
        }
      },
      "LinkHealthIdRequest": {
        "type": "object",
        "properties": {
          "patient": {
            "type": "string",
            "example": "729122b7-c26d-42ff-a4a1-31cc5e277e93"
          },
          "healthid": {
            "type": "string",
            "example": "sumitdemonew@sbx"
          },
          "abhaNumber": {
            "type": "string",
            "example": "44-2653-6813-4604"
          }
        }
      },
      "LinkHealthIdSuccessResponse": {
        "type": "object",
        "properties": {
          "isUserAbhaLoginUpdated": {
            "type": "boolean",
            "example": true
          }
        }
      },
      "LinkHealthIdErrorResponse": {
        "type": "object",
        "properties": {
          "error": {
            "type": "string",
            "example": "ABDM Health ID already setup for this patient"
          }
        }
      },
      "Message": {
        "type": "object",
        "properties": {
          "date": {
            "type": "string",
            "format": "date-time",
            "description": "Date and time when the message was sent."
          },
          "synced": {
            "type": "string",
            "description": "Sync status of the message."
          },
          "person_uuid": {
            "type": "string",
            "format": "uuid",
            "description": "Unique identifier of the person associated with the message."
          },
          "name": {
            "type": "string",
            "description": "Name of the person associated with the message."
          },
          "action": {
            "type": "string",
            "description": "Action associated with the message."
          },
          "message_id": {
            "type": "string",
            "description": "Unique identifier of the message."
          },
          "message_type": {
            "type": "string",
            "nullable": true,
            "description": "Type of the message."
          },
          "message": {
            "type": "string",
            "description": "Content of the message."
          },
          "uuid": {
            "type": "string",
            "format": "uuid",
            "description": "Unique identifier of the message entry."
          },
          "seen": {
            "type": "string",
            "description": "Seen status of the message."
          },
          "group_recipient_uuid": {
            "type": "string",
            "format": "uuid",
            "description": "Unique identifier of the group recipient of the message."
          }
        }
      },
      "LinkedCareContexts": {
        "type": "object",
        "properties": {
          "patient": {
            "$ref": "#/components/schemas/patient"
          }
        }
      },
      "patient": {
        "type": "object",
        "required": [
          "id",
          "name"
        ],
        "properties": {
          "id": {
            "type": "string"
          },
          "links": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/phrlinks"
            }
          }
        }
      },
      "phrlinks": {
        "type": "object",
        "properties": {
          "hip": {
            "$ref": "#/components/schemas/hip"
          },
          "referenceNumber": {
            "type": "string"
          },
          "display": {
            "type": "string"
          },
          "careContexts": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CareContextRepresentation"
            },
            "xml": {
              "wrapped": true
            }
          }
        }
      },
      "hip": {
        "type": "object",
        "required": [
          "id"
        ],
        "properties": {
          "id": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "type": {
            "type": "string"
          }
        }
      },
      "CareContextRepresentation": {
        "type": "object",
        "properties": {
          "referenceNumber": {
            "type": "string"
          },
          "display": {
            "type": "string"
          }
        },
        "xml": {
          "name": "CareContextResponse"
        }
      },
      "AuthenticateResponse": {
        "type": "object",
        "properties": {
          "requestId": {
            "type": "string",
            "format": "uuid",
            "description": "The unique identifier of the request."
          },
          "patientInfo": {
            "type": "string",
            "description": "A JSON string containing the patient's information."
          }
        }
      },
      "HealthIdValidationResponse": {
        "type": "object",
        "properties": {
          "message": {
            "type": "string",
            "description": "Response message indicating the result of the health ID validation."
          }
        }
      },
      "HealthIdResponse": {
        "type": "object",
        "properties": {
          "healthId": {
            "type": "string",
            "description": "The Health ID associated with the patient."
          }
        },
        "required": [
          "healthId"
        ]
      },
      "ProviderConsentsResponse": {
        "type": "object",
        "properties": {
          "result": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PatientConsent"
            }
          }
        }
      },
      "PatientConsent": {
        "type": "object",
        "properties": {
          "consentStartDate": {
            "type": "string",
            "format": "datetime",
            "description": "The start date and time of the consent."
          },
          "purpose": {
            "type": "string",
            "description": "The purpose of the consent."
          },
          "healthId": {
            "type": "string",
            "description": "The health ID of the patient."
          },
          "consentId": {
            "type": "string",
            "nullable": true,
            "description": "The ID of the consent. This field may be null."
          },
          "consentRequestId": {
            "type": "string",
            "description": "The ID of the consent request."
          },
          "hiTypes": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "The types of health information included in the consent."
          },
          "requestId": {
            "type": "string",
            "description": "The ID of the request."
          },
          "patient": {
            "$ref": "#/components/schemas/ConsentPatient"
          },
          "location": {
            "type": "string",
            "format": "uuid",
            "description": "The UUID of the location associated with the consent."
          },
          "consentEndDate": {
            "type": "string",
            "format": "datetime",
            "description": "The end date and time of the consent."
          },
          "consentCreatedOn": {
            "type": "string",
            "format": "datetime",
            "description": "The date and time when the consent was created."
          },
          "status": {
            "type": "string",
            "description": "The status of the consent."
          },
          "consentExpiryDate": {
            "type": "string",
            "format": "datetime",
            "description": "The expiry date and time of the consent."
          }
        }
      },
      "ConsentPatient": {
        "type": "object",
        "properties": {
          "uuid": {
            "type": "string",
            "format": "uuid",
            "description": "The UUID of the patient."
          },
          "id": {
            "type": "integer",
            "description": "The ID of the patient."
          },
          "display": {
            "type": "string",
            "description": "The display name of the patient."
          },
          "gender": {
            "type": "string",
            "description": "The gender of the patient."
          },
          "age": {
            "type": "integer",
            "description": "The age of the patient."
          },
          "birthdate": {
            "type": "integer",
            "format": "timestamp",
            "description": "The birthdate of the patient in timestamp format."
          },
          "healthCenter": {
            "type": "string",
            "description": "The ID of the health center associated with the patient."
          }
        }
      },
      "ConsentRequest": {
        "type": "object",
        "required": [
          "provider",
          "patient",
          "location",
          "from",
          "to",
          "dataEraseAt",
          "purpose",
          "hiTypes"
        ],
        "properties": {
          "provider": {
            "type": "string",
            "format": "uuid",
            "description": "The UUID of the provider."
          },
          "patient": {
            "type": "string",
            "format": "uuid",
            "description": "The UUID of the patient."
          },
          "location": {
            "type": "string",
            "format": "uuid",
            "description": "The UUID of the location."
          },
          "from": {
            "type": "string",
            "format": "date-time",
            "description": "The start date and time of the consent period."
          },
          "to": {
            "type": "string",
            "format": "date-time",
            "description": "The end date and time of the consent period."
          },
          "dataEraseAt": {
            "type": "string",
            "format": "date-time",
            "description": "The date and time at which the data should be erased."
          },
          "purpose": {
            "type": "string",
            "description": "The purpose of the consent."
          },
          "hiTypes": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "The types of health information required."
          }
        }
      },
      "ConsentRequestResponse": {
        "type": "object",
        "properties": {
          "requestId": {
            "type": "string",
            "description": "The unique identifier of the consent request."
          },
          "sentSuccessfull": {
            "type": "boolean",
            "description": "Indicates whether the consent request was sent successfully."
          }
        }
      },
      "ProfileDetails": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "fullName": {
            "type": "string"
          },
          "name": {
            "$ref": "#/components/schemas/Name"
          },
          "gender": {
            "type": "string"
          },
          "dateOfBirth": {
            "$ref": "#/components/schemas/DateOfBirth"
          },
          "hasTransactionPin": {
            "type": "boolean"
          },
          "healthId": {
            "type": "string"
          },
          "address": {
            "type": "string"
          },
          "stateName": {
            "type": "string"
          },
          "stateCode": {
            "type": "string"
          },
          "districtName": {
            "type": "string"
          },
          "districtCode": {
            "type": "string"
          },
          "aadhaarVerified": {
            "type": "boolean"
          },
          "profilePhoto": {
            "type": "string"
          },
          "kycDocumentType": {
            "type": "string",
            "nullable": true
          },
          "kycStatus": {
            "type": "string"
          },
          "mobile": {
            "type": "string"
          },
          "mobileVerified": {
            "type": "boolean"
          },
          "email": {
            "type": "string",
            "nullable": true
          },
          "emailVerified": {
            "type": "boolean"
          },
          "countryName": {
            "type": "string"
          },
          "pincode": {
            "type": "string"
          },
          "abhaAddresses": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/AbhaAddress"
            }
          }
        }
      },
      "DateOfBirth": {
        "type": "object",
        "properties": {
          "date": {
            "type": "integer"
          },
          "month": {
            "type": "integer"
          },
          "year": {
            "type": "integer"
          }
        }
      },
      "AbhaAddress": {
        "type": "object",
        "properties": {
          "fullName": {
            "type": "string"
          },
          "phrAddress": {
            "type": "string"
          },
          "profilePhoto": {
            "type": "string"
          }
        }
      },
      "CreatePinRequest": {
        "type": "object",
        "properties": {
          "pin": {
            "type": "string",
            "maximum": 9999,
            "example": "1234",
            "description": "4 digit number"
          }
        },
        "required": [
          "pin"
        ]
      },
      "ValidatePinRequest": {
        "type": "object",
        "properties": {
          "requestId": {
            "type": "string",
            "format": "uuid"
          },
          "pin": {
            "type": "string",
            "maximum": 9999,
            "example": "1234",
            "description": "4 digit number"
          },
          "scope": {
            "type": "string",
            "enum": [
              "consentrequest.approve",
              "consent.revoke",
              "consent.autoaprove",
              "profile.changepin"
            ],
            "description": "Scope the supplied token will be valid for"
          }
        },
        "required": [
          "pin",
          "scope"
        ]
      },
      "IdentifierVerifyResponse": {
        "type": "object",
        "properties": {
          "temporaryToken": {
            "type": "string",
            "description": "Token String"
          }
        }
      },
      "ChangePinRequest": {
        "type": "object",
        "properties": {
          "pin": {
            "type": "string",
            "maximum": 9999,
            "example": "1234",
            "description": "4 digit number"
          }
        },
        "required": [
          "pin"
        ]
      },
      "ABDMErrorResponse": {
        "type": "object",
        "properties": {
          "error": {
            "$ref": "#/components/schemas/ABDMError"
          }
        }
      },
      "ABDMError": {
        "type": "object",
        "properties": {
          "code": {
            "type": "integer",
            "enum": [
              1000,
              10001
            ],
            "description": "1. Error code 1000 : No patient found 2. Error code 1001: Multiple patients found\n"
          }
        }
      },
      "GenerateOtpResponse": {
        "type": "object",
        "properties": {
          "sessionId": {
            "type": "string",
            "format": "uuid",
            "example": "3fa85f64-5717-4562-b3fc-2c963f66afa6"
          },
          "otpMedium": {
            "type": "string",
            "enum": [
              "MOBILE | EMAIL"
            ],
            "example": "MOBILE"
          },
          "otpMediumValue": {
            "type": "string",
            "format": "string",
            "example": 9999999999
          },
          "expiryInMinutes": {
            "type": "integer",
            "example": 5
          }
        }
      },
      "forgotVerifyOtpRequest": {
        "type": "object",
        "required": [
          "sessionId",
          "value"
        ],
        "properties": {
          "sessionId": {
            "type": "string",
            "format": "uuid",
            "example": "6357247d-6b9d-425e-a9a5-6ba9915c12ea"
          },
          "value": {
            "type": "integer",
            "example": 666666,
            "description": "6 digit number"
          }
        }
      },
      "ShareProfileRequest1": {
        "type": "object",
        "required": [
          "requestId",
          "intent",
          "location",
          "hipDetails"
        ],
        "properties": {
          "requestId": {
            "type": "string",
            "format": "uuid"
          },
          "intent": {
            "type": "object",
            "required": [
              "type"
            ],
            "properties": {
              "type": {
                "type": "string"
              }
            }
          },
          "location": {
            "$ref": "#/components/schemas/profileShareLocation"
          },
          "hipDetails": {
            "$ref": "#/components/schemas/HIPDetails1"
          }
        }
      },
      "HIPDetails1": {
        "type": "object",
        "required": [
          "hipId",
          "code"
        ],
        "properties": {
          "hipId": {
            "type": "string",
            "example": "HIP_Code",
            "description": "HIP id is required."
          },
          "code": {
            "type": "string",
            "example": "12345"
          }
        }
      },
      "profileShareLocation": {
        "type": "object",
        "required": [
          "latitude",
          "longitude"
        ],
        "properties": {
          "latitude": {
            "type": "string"
          },
          "longitude": {
            "type": "string"
          }
        }
      },
      "ShareProfileResponse1": {
        "type": "object",
        "properties": {
          "status": {
            "type": "string",
            "enum": [
              "SUCCESS",
              "FAILURE"
            ]
          },
          "healthId": {
            "type": "string"
          },
          "tokenNumber": {
            "type": "string"
          }
        }
      },
      "LockerApprovalRequest": {
        "type": "object",
        "required": [
          "subscription",
          "autoApproval",
          "authorization"
        ],
        "properties": {
          "subscription": {
            "$ref": "#/components/schemas/SubscriptionApproval"
          },
          "autoApproval": {
            "$ref": "#/components/schemas/ConsentAutoApprovalRequestRepresentation"
          },
          "authorization": {
            "$ref": "#/components/schemas/AuthorizationApproval"
          }
        }
      },
      "SubscriptionApproval": {
        "type": "object",
        "properties": {
          "requestId": {
            "type": "string",
            "format": "uuid"
          },
          "isApplicableForAllHIPs": {
            "type": "boolean"
          },
          "includedSources": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SubscriptionApprovalSource"
            }
          },
          "excludedSources": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SubscriptionApprovalSource"
            }
          }
        },
        "xml": {
          "name": "SubscriptionApproval"
        }
      },
      "AuthorizationApproval": {
        "type": "object",
        "required": [
          "requestId",
          "generatePerpetualToken"
        ],
        "properties": {
          "requestId": {
            "type": "string",
            "format": "uuid"
          },
          "generatePerpetualToken": {
            "type": "boolean"
          }
        }
      },
      "ConsentAutoApprovalRequestRepresentation": {
        "type": "object",
        "required": [
          "hiu",
          "includedSources",
          "excludedSources",
          "isApplicableForAllHIPs"
        ],
        "properties": {
          "isApplicableForAllHIPs": {
            "type": "boolean"
          },
          "hiu": {
            "$ref": "#/components/schemas/OrganizationRepresentation"
          },
          "includedSources": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ConsentAutoApprovalIncludedSource"
            }
          },
          "excludedSources": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ConsentAutoApprovalExcludedSource"
            }
          }
        }
      },
      "SubscriptionApprovalSource": {
        "type": "object",
        "required": [
          "purpose",
          "categories",
          "period",
          "hip",
          "hiTypes"
        ],
        "properties": {
          "hiTypes": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/HITypeEnum"
            }
          },
          "purpose": {
            "$ref": "#/components/schemas/UsePurpose"
          },
          "hip": {
            "$ref": "#/components/schemas/OrganizationRepresentation"
          },
          "categories": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SubscriptionCategory"
            }
          },
          "period": {
            "$ref": "#/components/schemas/SubscriptionPeriod"
          }
        }
      },
      "HITypeEnum": {
        "type": "string",
        "enum": [
          "Prescription",
          "DiagnosticReport",
          "OPConsultation",
          "DischargeSummary",
          "ImmunizationRecord",
          "HealthDocumentRecord",
          "WellnessRecord"
        ]
      },
      "UsePurpose": {
        "type": "object",
        "required": [
          "text",
          "code"
        ],
        "properties": {
          "text": {
            "type": "string"
          },
          "code": {
            "type": "string",
            "description": "From the fixed set, documented at refUri"
          },
          "refUri": {
            "type": "string",
            "format": "uri"
          }
        }
      },
      "OrganizationRepresentation": {
        "type": "object",
        "required": [
          "id"
        ],
        "properties": {
          "id": {
            "type": "string",
            "xml": {
              "attribute": true
            }
          },
          "name": {
            "type": "string",
            "xml": {
              "attribute": true
            }
          }
        }
      },
      "SubscriptionCategory": {
        "type": "string",
        "enum": [
          "LINK",
          "DATA"
        ]
      },
      "SubscriptionPeriod": {
        "type": "object",
        "required": [
          "from",
          "to"
        ],
        "properties": {
          "from": {
            "type": "string",
            "format": "date-time"
          },
          "to": {
            "type": "string",
            "format": "date-time"
          }
        }
      },
      "ConsentAutoApprovalIncludedSource": {
        "type": "object",
        "required": [
          "purpose",
          "period",
          "hiTypes"
        ],
        "properties": {
          "hiTypes": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/HITypeEnum"
            }
          },
          "purpose": {
            "$ref": "#/components/schemas/UsePurpose"
          },
          "hip": {
            "$ref": "#/components/schemas/OrganizationRepresentation"
          },
          "period": {
            "$ref": "#/components/schemas/SubscriptionPeriod"
          }
        }
      },
      "ConsentAutoApprovalExcludedSource": {
        "type": "object",
        "required": [
          "purpose",
          "hip",
          "hiTypes"
        ],
        "properties": {
          "hiTypes": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/HITypeEnum"
            }
          },
          "purpose": {
            "$ref": "#/components/schemas/UsePurpose"
          },
          "hip": {
            "$ref": "#/components/schemas/OrganizationRepresentation"
          }
        }
      },
      "LockerRequestsApprovalResponse": {
        "type": "object",
        "properties": {
          "subscriptionId": {
            "type": "string",
            "format": "uuid"
          },
          "autoApprovalId": {
            "type": "string",
            "format": "uuid"
          },
          "authorizationId": {
            "type": "string",
            "format": "uuid"
          }
        }
      },
      "StateRequestResponse": {
        "type": "object",
        "properties": {
          "states": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/state"
            }
          }
        }
      },
      "state": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "example": "maharashtra"
          },
          "code": {
            "type": "integer",
            "example": 27
          }
        }
      },
      "ProvidersRepresentation": {
        "type": "array",
        "items": {
          "$ref": "#/components/schemas/ProviderRepresentation"
        },
        "xml": {
          "name": "ProvidersResponse"
        }
      },
      "ProviderRepresentation": {
        "type": "object",
        "properties": {
          "identifier": {
            "allOf": [
              {
                "$ref": "#/components/schemas/OrganizationRepresentation"
              }
            ]
          },
          "city": {
            "type": "string"
          },
          "telephone": {
            "type": "string"
          },
          "latitude": {
            "type": "string",
            "example": 11.96
          },
          "longitude": {
            "type": "string",
            "example": 79.73
          },
          "address": {
            "type": "string",
            "example": "Nadu street thondamanatham"
          },
          "districtCode": {
            "type": "string",
            "example": 600
          },
          "stateCode": {
            "type": "string",
            "example": 34
          },
          "pinCode": {
            "type": "string",
            "example": 605002
          },
          "facilityType": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "example": [
              "HIP",
              "HIU",
              "HEALTH_LOCKER"
            ]
          },
          "isHIP": {
            "type": "boolean",
            "example": true
          },
          "attribute": {
            "allOf": [
              {
                "$ref": "#/components/schemas/phrProviderAttribute"
              }
            ]
          }
        }
      },
      "phrProviderAttribute": {
        "type": "object",
        "required": [
          "hipAttributes",
          "hiuAttributes",
          "healthLockerAttributes"
        ],
        "properties": {
          "hipAttributes": {
            "type": "string",
            "example": null
          },
          "hiuAttributes": {
            "type": "string",
            "example": null
          },
          "healthLockerAttributes": {
            "type": "string",
            "example": null
          }
        }
      },
      "PatientDiscoveryRequest": {
        "type": "object",
        "properties": {
          "requestId": {
            "type": "string",
            "format": "uuid"
          },
          "hip": {
            "type": "object",
            "properties": {
              "id": {
                "type": "string",
                "description": "Identifier of the health information provider where patient record needs to be looked up."
              }
            }
          },
          "unverifiedIdentifiers": {
            "description": "additional unverified identifiers may be passed",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PatientIdentifier"
            }
          }
        }
      },
      "PatientIdentifier": {
        "type": "object",
        "properties": {
          "type": {
            "$ref": "#/components/schemas/PatientIdentifierType"
          },
          "value": {
            "type": "string",
            "example": "+919800083232"
          }
        }
      },
      "PatientIdentifierType": {
        "type": "string",
        "enum": [
          "MR",
          "MOBILE",
          "NDHM_HEALTH_NUMBER",
          "HEALTH_ID"
        ]
      },
      "PatientDiscoveryRepresentation": {
        "type": "object",
        "properties": {
          "transactionId": {
            "type": "string",
            "format": "uuid"
          },
          "patient": {
            "$ref": "#/components/schemas/PatientRepresentation"
          },
          "createdAt": {
            "type": "string",
            "format": "date-time"
          }
        }
      },
      "PatientRepresentation": {
        "type": "object",
        "properties": {
          "referenceNumber": {
            "type": "string"
          },
          "display": {
            "type": "string"
          },
          "careContexts": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CareContextRepresentation"
            }
          }
        }
      },
      "UserDetails": {
        "type": "object",
        "properties": {
          "phrAddress": {
            "type": "string",
            "description": "The PHR address of the user."
          },
          "authMethods": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "A list of available authentication methods for the user."
          }
        }
      },
      "HealthCardResponse": {
        "type": "object",
        "properties": {
          "contentType": {
            "type": "string",
            "description": "The content type of the health card image."
          },
          "image": {
            "type": "string",
            "description": "The health card image represented as a string."
          }
        }
      },
      "PatientSubscriptionResponse": {
        "type": "object",
        "properties": {
          "status": {
            "type": "string",
            "description": "The status of the request."
          },
          "activeSubscription": {
            "type": "boolean",
            "description": "Indicates whether the patient has an active subscription."
          }
        }
      },
      "GenerateReportRequest": {
        "type": "object",
        "required": [
          "reportDefinitionId",
          "reportOutputType",
          "convertOutputToBase64",
          "provider_uuid"
        ],
        "properties": {
          "reportDefinitionId": {
            "type": "string",
            "description": "The ID of the report definition."
          },
          "reportOutputType": {
            "type": "string",
            "description": "The output type of the report (e.g., pdf, csv)."
          },
          "convertOutputToBase64": {
            "type": "boolean",
            "description": "Flag to indicate if the report output should be converted to base64."
          },
          "provider_uuid": {
            "type": "string",
            "description": "The UUID of the provider requesting the report."
          }
        }
      },
      "ReportsListResponse": {
        "type": "object",
        "properties": {
          "reports": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Report"
            }
          }
        }
      },
      "Report": {
        "type": "object",
        "properties": {
          "dateChanged": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "creator": {
            "type": "string",
            "nullable": true
          },
          "voidReason": {
            "type": "string",
            "nullable": true
          },
          "reportId": {
            "type": "integer"
          },
          "specificTo": {
            "type": "string"
          },
          "accessLevel": {
            "type": "string"
          },
          "subject": {
            "type": "string"
          },
          "author": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "dateVoided": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "reportDefinitionId": {
            "type": "string"
          },
          "uuid": {
            "type": "string"
          },
          "voidedBy": {
            "type": "string",
            "nullable": true
          },
          "dateCreated": {
            "type": "string"
          },
          "changedBy": {
            "type": "string",
            "nullable": true
          },
          "name": {
            "type": "string"
          },
          "voided": {
            "type": "boolean"
          },
          "parameters": {
            "type": "string"
          }
        },
        "required": [
          "reportId",
          "specificTo",
          "accessLevel",
          "subject",
          "author",
          "description",
          "reportDefinitionId",
          "uuid",
          "dateCreated",
          "name",
          "voided"
        ]
      },
      "signUpVerifyOtpRequest": {
        "type": "object",
        "required": [
          "action",
          "otp",
          "requestId"
        ],
        "properties": {
          "action": {
            "type": "string",
            "description": "The action for which OTP verification is being performed.",
            "example": "signup"
          },
          "otp": {
            "type": "string",
            "description": "The OTP provided to the user for verification.",
            "example": "785870"
          },
          "requestId": {
            "type": "string",
            "description": "A unique identifier for the verification request.",
            "example": "1790ae22-6427-4d8b-948f-eed0dfbfe021"
          }
        }
      },
      "signUpVerifyOtpResponse": {
        "type": "object",
        "properties": {
          "status": {
            "type": "string",
            "description": "The status of the OTP verification.",
            "example": "success"
          },
          "accountExists": {
            "type": "boolean",
            "description": "Indicates whether the account already exists.",
            "example": false
          }
        }
      },
      "NewUserRequest": {
        "type": "object",
        "required": [
          "firstName",
          "lastName",
          "password",
          "email",
          "dob",
          "gender",
          "country",
          "phone",
          "otpRequestId",
          "type",
          "isProvider"
        ],
        "properties": {
          "firstName": {
            "type": "string",
            "description": "The first name of the user."
          },
          "lastName": {
            "type": "string",
            "description": "The last name of the user."
          },
          "password": {
            "type": "string",
            "description": "The password for the user's account."
          },
          "email": {
            "type": "string",
            "format": "email",
            "description": "The email address of the user."
          },
          "dob": {
            "type": "string",
            "format": "date",
            "description": "The date of birth of the user in YYYY-MM-DD format."
          },
          "gender": {
            "type": "string",
            "description": "The gender of the user. Common values are \"M\" for male and \"F\" for female."
          },
          "country": {
            "type": "string",
            "description": "The country of residence of the user."
          },
          "phone": {
            "type": "string",
            "description": "The phone number of the user."
          },
          "otpRequestId": {
            "type": "string",
            "description": "The unique identifier for the OTP request associated with this user creation."
          },
          "type": {
            "type": "string",
            "description": "The type of user being created. For example, \"patient\"."
          },
          "isProvider": {
            "type": "boolean",
            "description": "A boolean indicating whether the user is a provider."
          }
        }
      },
      "NewUserResponse": {
        "type": "object",
        "properties": {
          "uuid": {
            "type": "string",
            "description": "The unique identifier for the created user."
          },
          "display": {
            "type": "string",
            "description": "A display string for the created user, usually in the format \"firstName lastName (username)\"."
          },
          "userName": {
            "type": "string",
            "description": "The username for the created user."
          },
          "providerUuid": {
            "type": "string",
            "description": "The unique identifier for the provider associated with this user, if applicable."
          },
          "personUuid": {
            "type": "string",
            "description": "The unique identifier for the person associated with this user."
          }
        }
      },
      "UserResponse": {
        "type": "object",
        "properties": {
          "uniqueIdentifier": {
            "type": "string",
            "description": "Indicates if the identifier is unique."
          },
          "message": {
            "type": "string",
            "description": "A message providing additional information about the user status."
          }
        }
      },
      "userAuthenticationOTPResponse": {
        "type": "object",
        "properties": {
          "requestId": {
            "type": "string",
            "format": "uuid",
            "description": "The unique identifier for the OTP request, used for future verification."
          },
          "messageId": {
            "type": "string",
            "description": "The unique identifier for the message sent to the requester."
          },
          "language": {
            "type": "string",
            "description": "The language in which the OTP message was sent"
          }
        }
      },
      "ProviderNetworkRequest": {
        "type": "object",
        "properties": {
          "fromPerson": {
            "type": "string",
            "description": "UUID of the person from whom the relationship is being established"
          },
          "toPerson": {
            "type": "string",
            "description": "UUID of the person to whom the relationship is being established"
          },
          "relationshipType": {
            "type": "integer",
            "description": "ID of the relationship type"
          }
        }
      },
      "SearchResults": {
        "type": "object",
        "properties": {
          "_shards": {
            "type": "object",
            "properties": {
              "total": {
                "type": "integer"
              },
              "failed": {
                "type": "integer"
              },
              "successful": {
                "type": "integer"
              },
              "skipped": {
                "type": "integer"
              }
            }
          },
          "hits": {
            "type": "object",
            "properties": {
              "hits": {
                "type": "array",
                "items": {
                  "type": "object"
                }
              },
              "total": {
                "type": "object",
                "properties": {
                  "value": {
                    "type": "integer"
                  },
                  "relation": {
                    "type": "string"
                  }
                }
              },
              "max_score": {
                "type": "number",
                "nullable": true
              }
            }
          },
          "took": {
            "type": "integer"
          },
          "timed_out": {
            "type": "boolean"
          },
          "aggregations": {
            "type": "object",
            "properties": {
              "unique_field_values": {
                "type": "object",
                "properties": {
                  "doc_count_error_upper_bound": {
                    "type": "integer"
                  },
                  "sum_other_doc_count": {
                    "type": "integer"
                  },
                  "buckets": {
                    "type": "array",
                    "items": {
                      "type": "object",
                      "properties": {
                        "doc_count": {
                          "type": "integer"
                        },
                        "top_hits": {
                          "type": "object"
                        },
                        "key": {
                          "type": "string"
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      },
      "ProviderSecurityGroupsResponse": {
        "type": "object",
        "properties": {
          "Groups": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SecurityGroup"
            }
          },
          "SelfPatientGroups": {
            "type": "array",
            "description": "Security groups for self-patient. Currently not in use.",
            "items": {
              "type": "object"
            }
          },
          "SelfPatientGPs": {
            "type": "array",
            "description": "Security groups for self-patient general practitioners. Currently not in use.",
            "items": {
              "type": "object"
            }
          }
        }
      },
      "SecurityGroup": {
        "type": "object",
        "properties": {
          "locationId": {
            "type": "integer",
            "description": "The ID of the location associated with the security group."
          },
          "locationUuid": {
            "type": "string",
            "format": "uuid",
            "description": "The UUID of the location associated with the security group."
          },
          "locationName": {
            "type": "string",
            "description": "The name of the location associated with the security group."
          },
          "address": {
            "type": "string",
            "nullable": true,
            "description": "The address of the location. This field may be null."
          },
          "groupId": {
            "type": "integer",
            "description": "The ID of the security group."
          },
          "groupName": {
            "type": "string",
            "description": "The name of the security group."
          },
          "groupUuid": {
            "type": "string",
            "format": "uuid",
            "description": "The UUID of the security group."
          },
          "description": {
            "type": "string",
            "description": "A description of the security group."
          },
          "accessPath": {
            "type": "string",
            "description": "The access path for the security group."
          }
        }
      },
      "ProviderChatAndSecurityGroupsResponse": {
        "type": "object",
        "properties": {
          "Groups": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ProviderGroup"
            }
          }
        }
      },
      "ProviderGroup": {
        "type": "object",
        "properties": {
          "providerName": {
            "type": "string",
            "description": "Name of the provider."
          },
          "providerAttributes": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/providerAttribute"
            }
          },
          "locationId": {
            "type": "integer",
            "description": "Numeric ID of the location."
          },
          "locationUuid": {
            "type": "string",
            "format": "uuid",
            "description": "Unique identifier of the location."
          },
          "locationName": {
            "type": "string",
            "description": "Name of the location."
          },
          "groupId": {
            "type": "integer",
            "description": "Numeric ID of the group."
          },
          "groupName": {
            "type": "string",
            "description": "Name of the group."
          },
          "groupUuid": {
            "type": "string",
            "format": "uuid",
            "description": "Unique identifier of the group."
          },
          "description": {
            "type": "string",
            "description": "Description of the group."
          }
        }
      },
      "providerAttribute": {
        "type": "object",
        "properties": {
          "attributeType": {
            "type": "string",
            "description": "Type of the attribute."
          },
          "value": {
            "type": "string",
            "description": "Value of the attribute."
          }
        }
      },
      "GrantAccessRequest": {
        "type": "object",
        "properties": {
          "uuid": {
            "type": "string",
            "format": "uuid",
            "description": "Unique identifier of the resource for which access is being granted."
          },
          "groupId": {
            "type": "string",
            "description": "ID of the security group to which access is being granted."
          },
          "relationshipType": {
            "type": "integer"
          }
        }
      },
      "CreateSecurityGroupRequest": {
        "type": "object",
        "properties": {
          "groupName": {
            "type": "string",
            "description": "JSON string representing the group name and associated information."
          },
          "groupDescription": {
            "type": "string",
            "description": "Description of the security group."
          },
          "members": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SecurityGroupMember"
            }
          }
        },
        "required": [
          "groupName",
          "groupDescription",
          "members"
        ]
      },
      "SecurityGroupMember": {
        "type": "object",
        "properties": {
          "personUuid": {
            "type": "string",
            "format": "uuid",
            "description": "UUID of the person to be added as a member of the security group."
          },
          "relationshipType": {
            "type": "integer",
            "description": "Type of relationship defining the access level of the member in the security group."
          }
        }
      },
      "CreateSecurityGroupResponse": {
        "type": "object",
        "properties": {
          "securityGroupName": {
            "type": "string",
            "description": "JSON string representing the security group name and associated information."
          },
          "securityGroupId": {
            "type": "string",
            "description": "ID of the created security group."
          },
          "securityGroupUuid": {
            "type": "string",
            "format": "uuid",
            "description": "UUID of the created security group."
          },
          "locationId": {
            "type": "string",
            "description": "ID of the location associated with the security group."
          },
          "locationUuid": {
            "type": "string",
            "format": "uuid",
            "description": "UUID of the location associated with the security group."
          },
          "groupDescription": {
            "type": "string",
            "description": "Description of the security group."
          },
          "members": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SecurityGroupMember"
            }
          },
          "status": {
            "type": "string",
            "description": "Status of the security group creation request."
          }
        }
      },
      "JoinGroupRequest": {
        "type": "object",
        "properties": {
          "uuid": {
            "type": "string",
            "format": "uuid",
            "description": "Unique identifier for the join group request"
          },
          "id": {
            "type": "integer",
            "format": "int32",
            "description": "Numeric identifier for the user making the join group request"
          },
          "display": {
            "type": "string",
            "description": "Display name of the user making the join group request"
          },
          "gender": {
            "type": "string",
            "description": "Gender of the user making the join group request"
          },
          "age": {
            "type": "integer",
            "format": "int32",
            "description": "Age of the user making the join group request"
          },
          "birthdate": {
            "type": "string",
            "format": "date-time",
            "description": "Birthdate of the user making the join group request"
          },
          "accessPath": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/AccessPath"
            }
          }
        },
        "example": {
          "uuid": "04f28cc7-27b3-4a7f-9857-b6c9a667cb69",
          "id": 8016,
          "display": "kartik Patel",
          "gender": "M",
          "age": 27,
          "birthdate": "1996-01-01T00:00:00.000Z",
          "accessPath": [
            {
              "id": "78518",
              "type": "Person"
            },
            {
              "id": "88911",
              "type": "RaxaSecurityGroup"
            },
            "(<adminChatMember> (<-joinGroupRequest> Requestor))"
          ]
        }
      },
      "testimonialCommentsRequest": {
        "type": "object",
        "required": [
          "toUuid"
        ],
        "properties": {
          "toUuid": {
            "type": "string",
            "format": "uuid",
            "description": "The unique identifier of the user for whom the testimonial comments are being retrieved."
          }
        }
      },
      "testimonialCommentsResponse": {
        "type": "array",
        "items": {
          "$ref": "#/components/schemas/testimonialComment"
        }
      },
      "testimonialComment": {
        "type": "object",
        "properties": {
          "uuid": {
            "type": "string",
            "format": "uuid",
            "description": "The unique identifier of the testimonial comment."
          },
          "fromUuid": {
            "type": "string",
            "format": "uuid",
            "description": "The unique identifier of the user who sent the testimonial comment."
          },
          "toUuid": {
            "type": "string",
            "format": "uuid",
            "description": "The unique identifier of the user to whom the testimonial comment was sent."
          },
          "name": {
            "type": "string",
            "description": "The name of the user who sent the testimonial comment."
          },
          "data": {
            "type": "string",
            "description": "The content of the testimonial comment."
          },
          "timestamp": {
            "type": "string",
            "format": "date-time",
            "description": "The timestamp when the testimonial comment was sent."
          },
          "displayFlag": {
            "type": "integer",
            "description": "A flag indicating how the testimonial comment should be displayed."
          }
        }
      },
      "DeclineTestimonialCommentRequest": {
        "type": "object",
        "required": [
          "uuid"
        ],
        "properties": {
          "uuid": {
            "type": "string",
            "format": "uuid",
            "description": "The unique identifier of the testimonial comment that is to be declined."
          }
        }
      },
      "DeclineTestimonialCommentResponse": {
        "type": "object",
        "properties": {
          "fieldCount": {
            "type": "integer",
            "description": "The number of fields returned in the response."
          },
          "affectedRows": {
            "type": "integer",
            "description": "The number of rows affected by the decline operation."
          },
          "insertId": {
            "type": "integer",
            "description": "The ID of the inserted row, if applicable."
          },
          "serverStatus": {
            "type": "integer",
            "description": "The status of the server after performing the operation."
          },
          "warningCount": {
            "type": "integer",
            "description": "The number of warnings generated during the operation."
          },
          "message": {
            "type": "string",
            "description": "A message providing additional information about the operation."
          },
          "protocol41": {
            "type": "boolean",
            "description": "A boolean indicating whether the protocol 41 is used."
          },
          "changedRows": {
            "type": "integer",
            "description": "The number of rows changed by the operation."
          }
        }
      },
      "PostTestimonialCommentRequest": {
        "type": "object",
        "required": [
          "uuid",
          "toUuid",
          "toName",
          "fromUuid",
          "fromName",
          "data"
        ],
        "properties": {
          "uuid": {
            "type": "string",
            "format": "uuid",
            "description": "The unique identifier of the testimonial comment."
          },
          "toUuid": {
            "type": "string",
            "format": "uuid",
            "description": "The unique identifier of the recipient of the testimonial comment."
          },
          "toName": {
            "type": "string",
            "description": "The name of the recipient of the testimonial comment."
          },
          "fromUuid": {
            "type": "string",
            "format": "uuid",
            "description": "The unique identifier of the sender of the testimonial comment."
          },
          "fromName": {
            "type": "string",
            "description": "The name of the sender of the comment."
          },
          "data": {
            "type": "string",
            "description": "The content of the comment."
          }
        }
      },
      "PostTestimonialCommentResponse": {
        "type": "array",
        "items": {
          "$ref": "#/components/schemas/DatabaseResponse"
        }
      },
      "DatabaseResponse": {
        "type": "object",
        "properties": {
          "fieldCount": {
            "type": "integer",
            "description": "The number of fields returned in the response."
          },
          "affectedRows": {
            "type": "integer",
            "description": "The number of rows affected by the operation."
          },
          "insertId": {
            "type": "integer",
            "description": "The ID of the inserted row, if applicable."
          },
          "serverStatus": {
            "type": "integer",
            "description": "The status of the server after performing the operation."
          },
          "warningCount": {
            "type": "integer",
            "description": "The number of warnings generated during the operation."
          },
          "message": {
            "type": "string",
            "description": "A message providing additional information about the operation, if any."
          },
          "protocol41": {
            "type": "boolean",
            "description": "A boolean indicating whether the protocol 41 is used."
          },
          "changedRows": {
            "type": "integer",
            "description": "The number of rows changed by the operation."
          }
        }
      },
      "AcceptTestimonialCommentRequest": {
        "type": "object",
        "required": [
          "uuid"
        ],
        "properties": {
          "uuid": {
            "type": "string",
            "format": "uuid",
            "description": "The unique identifier of the testimonial comment that is to be accepted."
          }
        }
      },
      "AcceptTestimonialCommentResponse": {
        "type": "object",
        "properties": {
          "fieldCount": {
            "type": "integer",
            "description": "The number of fields returned in the response."
          },
          "affectedRows": {
            "type": "integer",
            "description": "The number of rows affected by the accept operation."
          },
          "insertId": {
            "type": "integer",
            "description": "The ID of the inserted row, if applicable."
          },
          "serverStatus": {
            "type": "integer",
            "description": "The status of the server after performing the operation."
          },
          "warningCount": {
            "type": "integer",
            "description": "The number of warnings generated during the operation."
          },
          "message": {
            "type": "string",
            "description": "A message providing additional information about the operation."
          },
          "protocol41": {
            "type": "boolean",
            "description": "A boolean indicating whether the protocol 41 is used."
          },
          "changedRows": {
            "type": "integer",
            "description": "The number of rows changed by the operation."
          }
        }
      }
    }
  }
}
